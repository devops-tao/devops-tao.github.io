<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linux修行路</title>
  
  <subtitle>技术的提升只是量的积累，而思想的提升才是质的升华!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chomd.club/"/>
  <updated>2019-05-18T05:35:11.835Z</updated>
  <id>http://chomd.club/</id>
  
  <author>
    <name>Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python函数（二）</title>
    <link href="http://chomd.club/2019/05/17/Python%E5%87%BD%E6%95%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://chomd.club/2019/05/17/Python函数（二）/</id>
    <published>2019-05-17T03:10:39.000Z</published>
    <updated>2019-05-18T05:35:11.835Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h3><ul><li>给函数提供实参的时候，可以在集合类型前使用<em>或*</em>，把集合类型的结构解开，提取出所有元素作为函数的实参</li><li>非字典类型使用*解构成位置参数</li><li>字典类型使用**解构成关键字参数</li><li>提取出来的元素数目要和参数的要求匹配，也要和参数的类型匹配</li></ul><h3 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h3><ul><li>在一个函数中定义另外一个函数</li><li>函数有可见范围，就是所谓的作用域</li><li>内部函数不能被外部函数直接使用，否则会抛NameError异常<blockquote><pre><code>In [24]: def outer():...:     def inner():...:         print(&apos;inner&apos;)...:     print(&apos;outer&apos;)...:     inner()In [25]: outer()outerinnerIn [27]: inner()                 ---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input-27-bc10f1654870&gt; in &lt;module&gt;----&gt; 1 inner()NameError: name &apos;inner&apos; is not defined</code></pre></blockquote></li></ul><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ul><li>一个标识符的可见范围，就是标识符的作用域，一般常说的是变量的作用域</li></ul><h5 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h5><ul><li>在函数、类等内部可见</li><li>局部变量使用范围不能超过其所在的局部作用域</li></ul><h4 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h4><blockquote><pre><code>def outer1():                           |     def outer2():   o = 65                               |         o = 65   def inner():                         |         def inner():       print(&quot;inner{}&quot;.format(o))       |             o = 97       print(chr(o))                    |             print(&quot;inner{}&quot;.format(o))   print(&quot;outer{}&quot;.format(o))           |             print(chr(o))   inner()                              |         print(&quot;outer{}&quot;.format(o))outer1()                                |         inner()                                        |     outer2()</code></pre></blockquote><ul><li>从上例中可以看出：<ul><li>外层变量作用域在内层作用域可见</li><li>内层作用域inner中，如果定义了o = 97 ，相当于当前作用域中重新定义了一个新的变量o，但是这个o并没有覆盖外层作用域outer中的o</li></ul></li><li>再看一个简单的例子<blockquote><p>代码：</p><pre><code>x = 5def foo():    x += 1</code></pre><p>x += 1 其实就是 x = x + 1，相当于在foo内部定义一个局部变量x，那么foo内部所有x都是这个局部变量x了，但是这个x还没有完成赋值，就被右边拿来做加1操作了，所以调用该函数时会抛出异常（UnboundLocalError: local variable ‘x’ referenced before assignment），想要解决这个问题，就得使用全局变量global了</p></blockquote></li></ul><h5 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h5><ul><li>在整个程序的运行环境中可见</li></ul><h6 id="全局变量global"><a href="#全局变量global" class="headerlink" title="全局变量global"></a>全局变量global</h6><ul><li>实例1中，使用global关键字的变量，将foo内的x声明为外部的全局作用域中的定义x</li><li><p>全局作用域中必须有x的定义</p><blockquote><p>代码实例1：</p><pre><code>x = 5def foo():    global x    x += 1</code></pre></blockquote></li><li><p>实例2中，使用global关键字的变量，将foo内的x声明为外部的全局作用域中的定义x</p></li><li><p>但是，x = 10 赋值及定义，x在内部作用域为一个外部作用域的变量赋值，所有x += 1 不会报错，注意，这里的x的作用域还是全局的（针对该函数而言）</p><blockquote><p>代码实例2：</p><pre><code>def foo():    global x       #该变量的全局是相对于foo函数而言的    x = 10         #赋值及定义    x += 1         #不会报错    print(x)       #打印出11print(x)           #报错，因为在程序运行环境全局中没有定义‘x’</code></pre></blockquote></li><li><p>global总结</p><ul><li>x += 1这种是特殊形式长生的错误的原因？先引用后赋值，而python动态语言是赋值才算定义，才能被引用。解决方法，在这条语句之间增加 x=0 之类的赋值语句，货真使用global告诉内部作用域，取全局作用域查找变量定义</li><li>内部作用域使用 x=5 之类的赋值语句会重新定义局部作用域中使用的变量x，但是，一旦这个作用域使用global声明x为全局的，那么 x=5 相当于在位全局作用域的变量x赋值</li></ul></li><li><p>global使用规则</p><ul><li>外部作用域变量在内部作用域可见，但也不要在这个内部的局部作用域中直接使用，因为函数的母的就是为了封装，尽量与外界隔离</li><li>如果函数需要使用外部全局变量，请使用函数的形参传参解决</li><li>一句话，不适用global，学习它只是为了深入理解变量作用域</li></ul></li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ul><li>自由变量：未在本地作用于中定义的变量，例如定义在内层函数外的外层函数的作用域中的变量</li><li>闭包：就是一个概念，出现在嵌套函数中，值得是 内层函数引用到了外层函数的自由变量 ，就形成了闭包。<blockquote><p>代码实例解析</p><pre><code>def counter():    c = [0]    def inc():        c[0] += 1      #不会报错，c在counter函数中固定义过了，而且inc中的使用方式是为c的元素修改值，而不是重新定义变量        return c[0]    return incfoo = counter()print(foo(),foo())      #打印 1 2c = 100                 # 这个c和counter中的c死不一样的，而inc引用的是自由变量也就是counter中的变量cprint(foo())            #打印3</code></pre><p>上例是Python2中实现闭包的方式,Python3还可以使用nonlocal关键字</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参数解构&quot;&gt;&lt;a href=&quot;#参数解构&quot; class=&quot;headerlink&quot; title=&quot;参数解构&quot;&gt;&lt;/a&gt;参数解构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给函数提供实参的时候，可以在集合类型前使用&lt;em&gt;或*&lt;/em&gt;，把集合类型的结构解开，提取出所有元素作为函数的
      
    
    </summary>
    
      <category term="Python学习笔记" scheme="http://chomd.club/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://chomd.club/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数（一）</title>
    <link href="http://chomd.club/2019/05/17/Python%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://chomd.club/2019/05/17/Python函数（一）/</id>
    <published>2019-05-17T01:53:06.000Z</published>
    <updated>2019-05-17T03:13:40.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>函数<ul><li>数学定义：y=f(x)，y是x的函数，x是自变量</li><li>Python函数<ul><li>由若干个语句组成的语句块、函数名称、参数列表构成，它是组织代码的最小单元</li><li>完成一定的功能</li></ul></li></ul></li><li>函数的作用<ul><li>结构化变成对代码的最基本的封装，一般按照功能组织一段代码</li><li>封装的目的是为了复用，减少冗余</li><li>代码更加简洁美观、可读易懂</li></ul></li><li>函数的分类<ul><li>内建函数，如max()、reversed()等</li><li>库函数，如math.ceil()等</li></ul></li></ul><h3 id="函数定义、调用"><a href="#函数定义、调用" class="headerlink" title="函数定义、调用"></a>函数定义、调用</h3><ul><li><p>def语句定义函数</p><blockquote><p>   def 函数名(参数列表)：<br>　　函数体(代码块)<br>　　[return 返回值]</p></blockquote><ul><li>函数名就是标识符，命名要求一样</li><li>语句块必须缩进，约定4个空格</li><li>Python的函数没有return语句时，隐式会返回一个None值</li><li>定义中的参数列表成为形式参数，只是一种符号表达，简称形参</li></ul></li><li>调用<ul><li>函数定义只是声明了一个函数，它不会被执行，需要调用</li><li>调用的方式，就是函数名加上小括号，括号内写上参数</li><li>调用时写的参数是实际参数，是实实在在传入的值，简称实参</li></ul></li><li>函数举例<blockquote><pre><code>In [1]: def add(x,y):      #定义一个add函数...:     result = x + y  ...:     return result    In [2]: out = add(4,5)     #调用add函数In [3]: print(out)9</code></pre><p>   注意：1、函数是可调用对象，callable()<br>　　　2、函数需要在调用前定义，否则会抛NameError异常</p></blockquote></li></ul><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul><li>参数调用时传用的参数要和定义的个数相匹配（可变参数除外）</li></ul><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><blockquote><pre><code>def fn(x=5):    print(x)fn()             #等价于fn(x=5)</code></pre></blockquote><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><ul><li>按照参数定义顺序传入实参</li><li>def f(x,y,z) 调用使用 f(1,3,5)</li></ul><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><ul><li>使用形参的名字来传入实参的方式，如果使用了形参名字，那么传参顺序就可和定义顺序不同</li><li>def f(x,y,z) 调用使用 d(x=1,z=5，y=3)</li></ul><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><ul><li>一个形参可以匹配任意个参数</li></ul><h5 id="位置参数的可变参数"><a href="#位置参数的可变参数" class="headerlink" title="位置参数的可变参数"></a>位置参数的可变参数</h5><ul><li>在形参前使用*表示该形参是可变参数，可以接受多个实参</li><li>收集多个实参为一个tuple<blockquote><p>   有多个数，需要累加求和</p><pre><code>In [7]: def add(*nums):      #*nums为可变参数...:     sum = 0...:     print(type(nums))   #打印参数类型...:     for x in nums:  ...:         sum += x       ...:     print(sum)In [8]: add(3,6,9)           #调用函数add&lt;class &apos;tuple&apos;&gt;18</code></pre></blockquote></li></ul><h5 id="关键字参数的可变参数"><a href="#关键字参数的可变参数" class="headerlink" title="关键字参数的可变参数"></a>关键字参数的可变参数</h5><ul><li>在形参前使用**符号，表示可以接收多个关键字参数</li><li>收集的实参名称和值组成一个字典<blockquote><p>   打印配置信息：</p><pre><code>In [9]: def showconfig(**kwargs):...:     for k,v in kwargs.items():...:         print(&apos;{}:{}&apos;.format(k,v))In [10]: showconfig(host=&apos;127.0.0.1&apos;,port=&apos;4000&apos;,username=&apos;tao&apos;,password=&apos;123456&apos;)password:123456username:taoport:4000host:127.0.0.1</code></pre></blockquote></li></ul><h5 id="可变参数混合使用"><a href="#可变参数混合使用" class="headerlink" title="可变参数混合使用"></a>可变参数混合使用</h5><ul><li>配置信息打印<ul><li>def showconfig(username,password,**kwargs)</li><li>def showconfig(username,<em>args,*</em>kwargs)</li><li>def showconfig(username,password,<em>*kwargs,</em>args)</li></ul></li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>可变参数分为位置可变参数和关键字可变参数</li><li>位置可变参数在形参前面使用一个星号*</li><li>关键字可变参数在形参面前使用两个星号**</li><li>位置可变参数和关键字可变参数都可以收集若干个实参，位置可变参数收集形成一个tuple，关键字可变参数收集形成一个dict</li><li>混合使用参数时，可变参数要放到参数列表的最后，普通参数需要放到参数列表前面，位置可变参数需要在关键字可变参数之前</li></ul><h4 id="keyword-only参数（Python3加入）"><a href="#keyword-only参数（Python3加入）" class="headerlink" title="keyword-only参数（Python3加入）"></a>keyword-only参数（Python3加入）</h4><ul><li>如果在一个星号参数后，或者一个位置可变参数后，出现的普通参数，实际上已经不是普通参数了，而是keyword-only参数<blockquote><pre><code>In [12]: def fn(*args,x):...:     print(x)...:     print(args)In [13]: fn(3,5,x=7)7(3, 5)</code></pre><p>args可以看作已经截获了所有的位置参数，x如果不使用关键字参数就不可能拿到实参</p></blockquote></li><li>keyword-only参数另一种形式<blockquote><pre><code>In [20]: def fn(*,x,y):...:     print(x,y)In [21]: fn(x=1,y=2)1 2</code></pre><p>*号之后，普通形参都变成了必须给出的keyword-only参数</p></blockquote></li></ul><h3 id="函数参数总结"><a href="#函数参数总结" class="headerlink" title="函数参数总结"></a>函数参数总结</h3><ul><li>参数规则<ul><li>参数列表参数的一般顺序是，普通参数，缺省参数，位置可变参数，keyword-only参数（带缺省值），关键字可变参数<blockquote><p>def fn(x,y,z=3,<em>args,m=3,n,*</em>kwargs):<br>　　　print(x,y,z,m,n)<br>　　　print(args)<br>　　　print(kwargs)  </p></blockquote></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数&lt;ul&gt;
&lt;li&gt;数学定义：y=f(x)，y是x的函数，x是自变量&lt;/li&gt;
&lt;li&gt;Python函数&lt;ul&gt;
&lt;li&gt;由若
      
    
    </summary>
    
      <category term="Python学习笔记" scheme="http://chomd.club/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://chomd.club/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python相关知识点（一）</title>
    <link href="http://chomd.club/2019/05/16/Python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://chomd.club/2019/05/16/Python相关知识点（一）/</id>
    <published>2019-05-16T10:07:28.000Z</published>
    <updated>2019-05-16T13:05:14.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><ul><li>线性结构<ul><li>可迭代 for … in</li><li>可用len()获取长度</li><li>可以通过下标访问</li><li>可以切片</li></ul></li><li>学过的线性结构</li><li>列表、元组、字符串、bytes、bytearray</li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul><li>切片<ul><li>通过索引区间访问线性结构的一段数据</li><li>sequence[start,stop]区间的子序列</li><li>支持负索引</li><li>start为0，可以省略</li><li>stop为末尾，可以省略</li><li>超过上界（有边界），就取到末尾；超过下界（左边界），取到开头</li><li>start一定要在stop左边</li><li>[:] 表示从头至尾，全部元素取出，等效于copy()方法</li></ul></li><li>步长切片<ul><li>[start:stop:step]</li><li>step为不长，可正、负整数，默认是1</li><li>setp要和start:stop同向，否则返回空序列<blockquote><p>   In [1]: ‘www.hongtao.com’[4:10:2]　　#setp和start:stop同向<br>Out[1]: ‘hnt’<br>In [2]: list(‘www.hongtao.com’)[4:10:-2]　　#setp和start:stop不同向<br>Out[2]: []  </p></blockquote></li></ul></li></ul><h3 id="封装和解构"><a href="#封装和解构" class="headerlink" title="封装和解构"></a>封装和解构</h3><ul><li><p>例子</p><blockquote><p>   a = 3<br>In [4]: b = 4<br>In [5]: temp = a　　　　&lt;==&gt;　　　　a,b=b,a<br>In [6]: a = b<br>In [7]: b = temp  </p></blockquote><ul><li>上例a,b = b,a中，等号右边使用了封装，而左边则是使用了解构</li></ul></li></ul><h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><ul><li>把线性结构的元素解开，并顺序的赋给其它变量</li><li>左边接纳的变量数要和右边解开的元素个数一致<blockquote><p>   In [8]: lst = [1,2]<br>In [9]: first,second = lst<br>In [10]: print(first,second)<br>1 2<br>#非线性结构也可以结构：<br>In [12]: a,b = {‘a’:1,’b’:2}<br>In [13]: a<br>Out[13]: ‘a’<br>In [14]: b<br>Out[14]: ‘b’  </p></blockquote></li></ul><h4 id="Python3的解构"><a href="#Python3的解构" class="headerlink" title="Python3的解构"></a>Python3的解构</h4><ul><li>使用 *变量名 接收，但不能单独使用  </li><li>被 *变量名 收集后组成一个列表<blockquote><p>   In [15]: lst = list(range(1,11,2))<br>In [16]: head,*mid,tail = lst<br>In [17]: type(mid)<br>Out[17]: list　　#mid类型为list</p></blockquote></li></ul><h3 id="丢弃变量"><a href="#丢弃变量" class="headerlink" title="丢弃变量"></a>丢弃变量</h3><ul><li>在python中，如果不关心一个变量，可以定义改变量的名字为_，这是一个惯例，一个不成文的约定，而不是标准</li><li>_是一个合法的标识符，也可以作为一个一个有效的变量使用，但是定义成下划线就是希望不被使用，除非你明确的知道这个数据需要使用，否则不推荐<blockquote><p>   In [18]: lst = list(range(1,11,2))<br>In [19]: head,*_,tail = lst<br>In [20]: print(_)  　　#_是一个合法的标识符，看到下划线就知道该变量不想被使用<br>[3, 5, 7]  </p></blockquote></li><li>总结<ul><li>_这个变量本身无任何语义，没有任何可读性，所以不是用来给人使用的</li><li>Python中很多库都在使用这个变量，使用十分广泛，故在不明确变量作用域的情况下，不推荐使用_变量，避免和库中_冲突</li></ul></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>全集：所有元素的集合，例如实数集，所有实数组成的集合就是全集</li><li>子集(subset)和超集(superset)：一个集合A所有元素在另外一个集合B内，A是B的子集，B是A的超集</li><li>真子集和真超集：A是B的子集，且A不等于B，A就是B的真子集，B是A的真超集</li><li>并集：多个集合合并的结果</li><li>交集：多个集合的公共部分</li><li>差集：集合中除去和其他集合公共部分</li></ul><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><ul><li>并集<ul><li>将两个集合A和B的所有的元素合并到一起，组成的集合称作集合A与集合B的并集</li><li>union(*others)  –&gt; 返回多个集合合并后的新的集合</li><li>| 运算符重载（等同union）</li><li>update(*others) –&gt; 和多个集合合并，就地修改</li><li>|= （等同与update）</li></ul></li><li>交集<ul><li>集合A和B，由所有属于A且属于B的元素组成的集合</li><li>intersection(*others) –&gt; 返回和多个集合的交集</li><li>&amp; （等同intersection）</li><li>intersection_uodate(*others) –&gt; 获取和多个集合的交集，并就地修改</li><li>&amp;= （等同intersection_uodate）</li></ul></li><li>差集<ul><li>集合A和B，由所有属于A且不属于B的元素组成的集合</li><li>difference(*others) –&gt; 返回会多个集合的差集</li><li>- （等同difference）</li><li>difference_update(*others) –&gt; 获取和多个集合的差集并就地修改</li><li>-= （等同difference_update）</li></ul></li><li>对称差集<ul><li>集合A和B，由所有不属于A和B的交集元素组成的集合，记作（A-B）∪(B-A)</li><li>symmetric_differece(other) –&gt; 返回和另一个集合的差集</li><li>^ （等同symmetric_differece）</li><li>symmetric_differece_update(other) –&gt; 获取和另一个集合的差集并就地修改</li><li>^= (等同symmetric_differece_update)</li></ul></li><li>issubset、&lt;=  　　　　　　–&gt;　　　判断当前集合是否是另一个集合的自己</li><li>set1 &lt; set2　　　 　　　　–&gt;　　　判断set1是否是set2的真子集</li><li>issuperset(other)、&gt;=　　–&gt;　　　判断当前集合是否是other的超集</li><li>set1 &gt; set2　　　　　　　 –&gt;　　　判断set1是否是set2的真超集</li><li>isdisjoint(other)　　　　　–&gt;　　　判断当前集合与另一集合是否有交集，没有交集，返回True</li></ul><h3 id="列表解析List-Comprehension"><a href="#列表解析List-Comprehension" class="headerlink" title="列表解析List Comprehension"></a>列表解析List Comprehension</h3><ul><li>语法<ul><li>[返回值 for 元素 in 可迭代对象 if 条件]</li><li>使用中括号[],内部是for循环，if条件语句可选</li><li>返回一个新的列表  </li></ul></li><li>列表解析是一种语法糖<ul><li>编译器会优化，不会因为简写而影响效率，反而因优化提高了效率</li><li>减少程序员工作量，减少出错</li><li>简化了代码，增强了可读性</li></ul></li></ul><h3 id="列表解析进阶"><a href="#列表解析进阶" class="headerlink" title="列表解析进阶"></a>列表解析进阶</h3><ul><li>[expr for in iterable1 for j in iterable2]<blockquote><p>   In [2]: [(x,y) for x in ‘abcde’ for y in range(3)]<br>  Out[2]:<br>  [(‘a’, 0),(‘a’, 1),(‘a’, 2),(‘b’, 0),(‘b’, 1),(‘b’, 2),(‘c’, 0),(‘c’, 1),(‘c’, 2),(‘d’, 0),(‘d’, 1),(‘d’, 2),(‘e’, 0),(‘e’, 1),(‘e’, 2)]</p></blockquote></li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li>特殊的对象，一定是可迭代对象，具备可迭代对象的特征</li><li>通过iter方法把一个可迭代对象封装成迭代器</li><li>通过next方法，迭代迭代器对象</li><li>生成器对象，就是迭代器对象</li></ul><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul><li>可迭代对象</li><li>迭代器</li></ul><h4 id="生成器表达式Generrator-expression"><a href="#生成器表达式Generrator-expression" class="headerlink" title="生成器表达式Generrator expression"></a>生成器表达式Generrator expression</h4><ul><li>语法<ul><li>(返回值 for 元素 in 可迭代对象 if 条件)</li><li>返回一个生成器</li></ul></li><li>和列表解析式的对比<ul><li>计算方式<ul><li>生成器表达式是按需计算(或称惰性求值、延迟计算)，需要的时候才计算值，列表解析式立即计算，然后返回新的列表</li></ul></li><li>内存占用<ul><li>单从返回值本身来说，生成器表达式省内存</li><li>生成器没有数据，内存占用极少，但是使用的时候，虽然一个个返回数据，但是合起来占用的内存跟列表解析式差不多</li><li>列表解析式构用新的列表占用内存</li></ul></li></ul></li><li>计算速度<ul><li>单看计算时间，生成器表达式耗时非常短，列表解析式耗时长</li><li>生成器本身并没有返回任何值，只返回了一个生成器对象</li><li>列表解析式构造并返回了新的列表</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线性结构&quot;&gt;&lt;a href=&quot;#线性结构&quot; class=&quot;headerlink&quot; title=&quot;线性结构&quot;&gt;&lt;/a&gt;线性结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线性结构&lt;ul&gt;
&lt;li&gt;可迭代 for … in&lt;/li&gt;
&lt;li&gt;可用len()获取长度&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Python学习笔记" scheme="http://chomd.club/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://chomd.club/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python基本内置数据结构（二）</title>
    <link href="http://chomd.club/2019/05/16/python%E5%9F%BA%E6%9C%AC%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://chomd.club/2019/05/16/python基本内置数据结构（二）/</id>
    <published>2019-05-16T09:04:59.000Z</published>
    <updated>2019-05-23T11:06:11.331Z</updated>
    
    <content type="html"><![CDATA[<p>在Python3中，引入了两个新类型：bytes（不可变字节序列）、bytearray（可变、字节数组）</p><h1 id="bytes、bytearray"><a href="#bytes、bytearray" class="headerlink" title="bytes、bytearray"></a>bytes、bytearray</h1><h2 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h2><h3 id="bytes定义"><a href="#bytes定义" class="headerlink" title="bytes定义"></a>bytes定义</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>bytes() –&gt; 空bytes</li><li>bytes(int) –&gt; 指定字节的bytes，被0填充</li><li>bytes(iterable_of_ints) –&gt; bytes[0,255]的int可迭代对象</li><li>bytes(string,encoding[,errors]) –&gt; bytes等价于string.encode()</li><li>bytes(bbytes_or_buffer) –&gt; immutable copy of bbytes_or_buffer 从一个字节序列或者buffer复制出一个新的不可变的bytes对象</li><li>使用b前缀定义<ul><li>只允许基本ASCII使用字符形式b’abc9’</li><li>使用16进制表示b”\x41\x61”</li></ul></li></ul><h3 id="bytes操作"><a href="#bytes操作" class="headerlink" title="bytes操作"></a>bytes操作</h3><ul><li><p>和str类型类似，都是不可变类型，所以很多方法都一样，只不过bytes的方法，输出的是bytes，输出的也是bytes</p><blockquote><p>   In [1]: b’abcdef’.replace(b’f’,b’k’)<br>Out[1]: b’abcdek’<br>In [2]: b’abc’.find(b’b’)<br>Out[2]: 1  </p></blockquote></li><li><p>类方法 bytes.fromhex(string)</p><ul><li>string必须是2个字符的16进制的形式，’6162 6a 6b’，空格将被忽略<blockquote><p>   In [3]: bytes.fromhex(‘6162 09 6a 6b00’)<br>Out[3]: b’ab\tjk\x00’<br>In [4]: bytes.fromhex(‘6162 6a 6b’)<br>Out[4]: b’abjk’  </p></blockquote></li></ul></li><li><p>hex()</p><ul><li>返回16进制表示的字符串<blockquote><p>   In [5]: ‘abc’.encode().hex()<br>Out[5]: ‘616263’  </p></blockquote></li></ul></li><li><p>索引</p><ul><li>返回对应该字节的数，int类型<blockquote><p>   In [6]: b’abcdef’[2]<br>Out[6]: 99  </p></blockquote></li></ul></li></ul><h2 id="bytearray"><a href="#bytearray" class="headerlink" title="bytearray"></a>bytearray</h2><h3 id="bytearray定义"><a href="#bytearray定义" class="headerlink" title="bytearray定义"></a>bytearray定义</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>bytearray() –&gt; 空bytes</li><li>bytearray(int) –&gt; 指定字节的bytes,被0填充</li><li>bytearray(iterable_of_ints) –&gt; bytes[0,255]的int组成的可迭代对象</li><li>bytearray(string,encode[,errors]) –&gt; bytes 近似string.encode(),不过返回可变对象</li><li>bytearray(bbytes_or_buffer) –&gt; 从一个字节序列的buffer复制出一个新的可变对象的bytearray对象</li><li>注意，b前缀定义的类型时bytes类型，而不是bytearray</li></ul><h3 id="bytearray操作"><a href="#bytearray操作" class="headerlink" title="bytearray操作"></a>bytearray操作</h3><ul><li><p>和bytes类型的方法相同</p><blockquote><p>   In [7]: bytearray(b’abcdef’).replace(b’c’,b’e’)<br>Out[7]: bytearray(b’abedef’)</p></blockquote></li><li><p>类方法 bytearray.fromhex(string)</p><ul><li>string必须是2个字符的16进制的形式，’6162 6a 6b’，空格将被忽略<blockquote><p>   In [8]: bytearray.fromhex(‘6162 6a 6b’)<br>Out[8]: bytearray(b’abjk’)</p></blockquote></li></ul></li><li><p>hex()</p><ul><li>返回16进制表示的字符串<blockquote><p>   In [9]: bytearray(‘abc’.encode()).hex()<br>Out[9]: ‘616263’</p></blockquote></li></ul></li><li><p>索引</p><ul><li>返回该字节对那个的数，int类型<blockquote><p>   In [10]: bytearray(b’abcdef’)[3]<br>Out[10]: 100</p></blockquote></li></ul></li><li><p>append(int) –&gt; 尾部追加一个元素</p></li><li>insert(index,int) –&gt; 在指定索引位置插入元素</li><li>extend(iterable_of_ints) –&gt; 将一个可迭代的整数集合追加到当前的bytearray</li><li>pop(index=-1) –&gt; 从指定索引上移除元素，默认从尾部移除</li><li>remove(value) –&gt; 从左至右，找到第一个value，找不到抛ValueError异常<ul><li>注意，使用该方法需要使用int类型，value在[0,255]</li></ul></li><li>clear() –&gt; 清空bytearray</li><li>reverse() –&gt; 翻转bytearray，就地修改</li></ul><h2 id="字符串与bytes、bytearray"><a href="#字符串与bytes、bytearray" class="headerlink" title="字符串与bytes、bytearray"></a>字符串与bytes、bytearray</h2><ul><li>字符串是字符组成的有序序列，字符可以使用编码来理解</li><li>bytes是字节组成的有序的不可变序列</li><li>bytearray是字节组成的有序的可变序列</li></ul><h2 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h2><ul><li>字符串按照不哦那个的字符集编码encode返回字节序列bytes<ul><li>encode(encoding = ‘utf-8’,errors = ‘strict’) –&gt; bytes</li></ul></li><li>字节序列按照不同的字符集解码decode返回字符串<ul><li>bytes.decode(encoding=”utf-8”,errors=”strict”) –&gt; str</li><li>bytearray.decode(encoding=”utf-8”,errors=”strict”) –&gt; str</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Python3中，引入了两个新类型：bytes（不可变字节序列）、bytearray（可变、字节数组）&lt;/p&gt;
&lt;h1 id=&quot;bytes、bytearray&quot;&gt;&lt;a href=&quot;#bytes、bytearray&quot; class=&quot;headerlink&quot; title=&quot;by
      
    
    </summary>
    
      <category term="Python学习笔记" scheme="http://chomd.club/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://chomd.club/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基本内置数据结构（一）</title>
    <link href="http://chomd.club/2019/05/12/Python%E5%9F%BA%E6%9C%AC%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://chomd.club/2019/05/12/Python基本内置数据结构（一）/</id>
    <published>2019-05-12T06:14:10.000Z</published>
    <updated>2019-05-16T12:48:23.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><h3 id="数值型-1"><a href="#数值型-1" class="headerlink" title="数值型"></a>数值型</h3><ul><li>int、float、complex、bool都是class，1，2.0，3+4j都是对象即实例    </li><li>int：python3中的int就是长整型，且没有大小限制，受限于内存区域的大小    </li><li>float：由整数部分和小数部分组成。支持十进制和科学计数法表示，只有双精度型    </li><li>complex：由实数和虚数部分组成，实数和虚数部分都是浮点数，如3+4.5j</li><li>bool：int的子类，仅有2个实例True、False对应1和0，可以和证书直接运算</li></ul><h3 id="类型转换-built-in"><a href="#类型转换-built-in" class="headerlink" title="类型转换( built-in )"></a>类型转换( built-in )</h3><ul><li>int(x) 返回一个整数</li><li>float(x) 返回一个浮点数</li><li>complex(x)、complex(x,y)返回一个复数</li><li>bool(x)返回布尔值  </li></ul><p>　tip：float不能精确的表示一个小数，只能近似表达，如3.333…..<br>　　　　　故float数不建议比较是否相等，建议比较大小</p><h2 id="序列对象"><a href="#序列对象" class="headerlink" title="序列对象"></a>序列对象</h2><h3 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a>字符串(str)</h3><ul><li>一个个字符组成的有序的序列，是字符的集合</li><li>使用单引号、双引号、三引号引住的字符序列</li><li>字符是不可变对象</li><li>Python中、字符串是Unicode类型<h4 id="字符串元素访问——下标"><a href="#字符串元素访问——下标" class="headerlink" title="字符串元素访问——下标"></a>字符串元素访问——下标</h4></li><li><p>字符串支持使用索引访问</p><blockquote><pre><code>In [1]: sql=&quot;select * from user where name=&apos;zht&apos;&quot;In [2]: sql[4]Out[2]: &apos;c&apos;</code></pre></blockquote></li><li><p>有续费字符集合，字符序列</p><blockquote><pre><code>for c in sql:    print(c)  #依次返回s、e、l、e、....、h、t、&apos;    print(type(c))  #返回&lt;class &apos;str&apos;&gt;，说明c是字符串</code></pre></blockquote></li><li><p>可迭代</p><blockquote><pre><code>In [1]: sql = &quot;select&quot;In [2]: lst = list(sql)In [3]: lstOut[3]: [&apos;s&apos;, &apos;e&apos;, &apos;l&apos;, &apos;e&apos;, &apos;c&apos;, &apos;t&apos;]</code></pre></blockquote></li></ul><h4 id="字符串连接（join）"><a href="#字符串连接（join）" class="headerlink" title="字符串连接（join）"></a>字符串连接（join）</h4><ul><li>“string”.join(iterable) -&gt; str<ul><li>将可迭代对象连接起来，使用string作为分隔符</li><li>可迭代对象本身都是字符串</li><li>返回一个新字符串<blockquote><pre><code>In [1]: lst = [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;]In [2]: print(&quot;\&quot;&quot;.join(lst))1&quot;2&quot;3In [3]: print(&quot; &quot;.join(lst))1 2 3In [4]: print(&quot;\n&quot;.join(lst))123</code></pre></blockquote></li></ul></li></ul><h4 id="字符串连接（-）"><a href="#字符串连接（-）" class="headerlink" title="字符串连接（+）"></a>字符串连接（+）</h4><ul><li>　+ -&gt; str<ul><li>将2个字符串连接再一起</li><li>返回一个新的字符串<blockquote><pre><code>In [7]: a = &apos;abc&apos;In [8]: b = &apos;def&apos;In [9]: a+bOut[9]: &apos;abcdef&apos;</code></pre></blockquote></li></ul></li></ul><h4 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h4><ul><li><p>split(sep=None,maxsplit=-1) -&gt; list of strings　　　（常用）</p><ul><li>将字符串按照分隔符分割成若干字符串，并返回列表</li><li>从左到右</li><li>sep指定分割字符串，缺省的情况下空白字符串作为分隔符</li><li>maxsplit制定分割的次数，-1表示遍历整个字符串<blockquote><pre><code>In [10]: s1 = &quot;I&apos;m \ta super student.&quot;In [11]: s1.split()Out[11]: [&quot;I&apos;m&quot;, &apos;a&apos;, &apos;super&apos;, &apos;student.&apos;]In [12]: s1.split(&apos;s&apos;)Out[12]: [&quot;I&apos;m \ta &quot;, &apos;uper &apos;, &apos;tudent.&apos;]In [13]: s1.split(&apos;super&apos;)Out[13]: [&quot;I&apos;m \ta &quot;, &apos; student.&apos;]In [14]: s1.split(&apos;super &apos;)Out[14]: [&quot;I&apos;m \ta &quot;, &apos;student.&apos;]In [15]: s1.split(&apos; &apos;)Out[15]: [&quot;I&apos;m&quot;, &apos;\ta&apos;, &apos;super&apos;, &apos;student.&apos;]In [16]: s1.split(&apos; &apos;,maxsplit=2)Out[16]: [&quot;I&apos;m&quot;, &apos;\ta&apos;, &apos;super student.&apos;]In [17]: s1.split(&apos;\t&apos;,maxsplit=2)Out[17]: [&quot;I&apos;m &quot;, &apos;a super student.&apos;]</code></pre></blockquote></li></ul></li><li><p>rsplit(sep=None,maxsplit=-1) -&gt; list of strings　　　（常用）</p><ul><li>从右到左</li><li>sep指定分割字符串，缺省的情况下空白字符串作为分隔符</li><li>maxsplit制定分割的次数，-1表示遍历整个字符串</li></ul></li><li><p>splitlines([keepends]) -&gt; list of strings</p><ul><li>按照行来切分字符串</li><li>keepends指的是是否包就行分隔符</li><li>行分隔符包括\n、\r\n、\r等<blockquote><pre><code>In [27]: &apos;ab c\n\nde fg\rkl\r\n&apos;.splitlines()Out[27]: [&apos;ab c&apos;, &apos;&apos;, &apos;de fg&apos;, &apos;kl&apos;]In [28]: &apos;ab c\n\nde fg\rkl\r\n&apos;.splitlines(True)Out[28]: [&apos;ab c\n&apos;, &apos;\n&apos;, &apos;de fg\r&apos;, &apos;kl\r\n&apos;]</code></pre></blockquote></li></ul></li><li><p>partition(sep) -&gt; (head,sep,tail)</p><ul><li>从左至右，遇到分隔符就把字符串分割成两部分，返回头、分隔符、尾三部分；如果没有找到分隔符，就返回头、2个空元素的三元组</li><li>sep分割字符串，必须指定<blockquote><pre><code>In [21]: s2 = &quot;I&apos;m a super student.&quot;In [22]: s2.partition(&apos;s&apos;)Out[22]: (&quot;I&apos;m a &quot;, &apos;s&apos;, &apos;uper student.&apos;)In [23]: s2.partition(&apos;stu&apos;)Out[23]: (&quot;I&apos;m a super &quot;, &apos;stu&apos;, &apos;dent.&apos;)In [24]: s2.partition(&apos; &apos;)Out[24]: (&quot;I&apos;m&quot;, &apos; &apos;, &apos;a super student.&apos;)In [25]: s2.partition(&apos;abc&apos;)Out[25]: (&quot;I&apos;m a super student.&quot;, &apos;&apos;, &apos;&apos;)</code></pre></blockquote></li></ul></li><li><p>rpartition(sep) -&gt; (head,sep,tail)</p><ul><li>从右至左，遇到分隔符就把字符串分割成两部分，返回头、分隔符、尾三部分；如果没有找到分隔符，就返回头、2个空元素的三元组</li></ul></li></ul><h4 id="字符串大小写"><a href="#字符串大小写" class="headerlink" title="字符串大小写"></a>字符串大小写</h4><ul><li>upper()　　#全大写</li><li>lower()　　#全小写</li><li>swapcase()　　#交互大小写</li></ul><h4 id="字符串排版"><a href="#字符串排版" class="headerlink" title="字符串排版"></a>字符串排版</h4><ul><li>title() -&gt; str　　#标题的每个单词都大写</li><li>capitalize() -&gt; str　　#首个单词大写</li><li>center(width[,fillchar]) -&gt; str 　#width打印宽度、fillchar填充的字符</li><li>zfill(width) -&gt; str　　#width打印宽度，居右，左边用0填充</li><li>ljust(width[,fillchar]) -&gt; str左对齐</li><li>rjust(width[,fillchar]) -&gt; str右对齐</li></ul><h4 id="字符串修改"><a href="#字符串修改" class="headerlink" title="字符串修改"></a>字符串修改</h4><ul><li><p>replace(old,new[,count]) -&gt; str</p><ul><li>字符串中找到平日配替换为新子串，返回新字符串</li><li>count表示替换几次，不指定就是全部替换<blockquote><pre><code>In [1]: &apos;www.tao.com&apos;.replace(&apos;w&apos;,&apos;p&apos;)Out[1]: &apos;ppp.tao.com&apos;In [2]: &apos;www.tao.com&apos;.replace(&apos;w&apos;,&apos;p&apos;,2)Out[2]: &apos;ppw.tao.com&apos;In [3]: &apos;www.tao.com&apos;.replace(&apos;w&apos;,&apos;p&apos;,3)Out[3]: &apos;ppp.tao.com&apos;In [4]: &apos;www.tao.com&apos;.replace(&apos;ww&apos;,&apos;p&apos;,2)Out[4]: &apos;pw.tao.com&apos;In [5]: &apos;www.tao.com&apos;.replace(&apos;www&apos;,&apos;python&apos;,2)Out[5]: &apos;python.tao.com&apos;</code></pre></blockquote></li></ul></li><li><p>strip([chars]) -&gt; str</p><ul><li>从字符串两端去除制定的字符集chars中的所有字符</li><li>如果chats没有制定，去除两端的空白字符<blockquote><pre><code>In [6]: s = &quot;\r\n\t Hello Python \n \t&quot;In [7]: sOut[7]: &apos;\r\n\t Hello Python \n \t&apos;In [8]: s.strip()Out[8]: &apos;Hello Python&apos;In [9]: s = &quot;I am very very very sorry &quot;In [10]: sOut[10]: &apos;I am very very very sorry &apos;In [11]: s.strip(&apos;Iy&apos;)Out[11]: &apos; am very very very sorry &apos;In [12]: s.strip(&apos;Iy &apos;)Out[12]: &apos;am very very very sorr&apos;</code></pre></blockquote></li></ul></li><li><p>lstrip([chars]) -&gt; str　　#从左开始</p></li><li>rstrip([chars]) -&gt; str　　#从右开始</li></ul><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><ul><li><p>find(sub[,start[,end]]) -&gt; int</p><ul><li>在指定的区间[start,end),从左至右，查找子串sub，找到返回索引，没找到返回-1<blockquote><pre><code>In [21]: sOut[21]: &apos;I am very very very sorry &apos;In [22]: s.find(&apos;very&apos;)Out[22]: 5In [23]: s.find(&apos;very&apos;,5)Out[23]: 5In [24]: s.find(&apos;very&apos;,6,13)Out[24]: -1</code></pre></blockquote></li></ul></li><li><p>rfind(sub[,start[,end]]) -&gt; int</p><ul><li>在指定的区间[start,end),从右至左，查找子串sub，找到返回索引，没找到返回-1<blockquote><pre><code>In [25]: s.rfind(&apos;very&apos;,10)Out[25]: 15In [26]: s.rfind(&apos;very&apos;,10,15)Out[26]: 10In [27]: s.rfind(&apos;very&apos;,-10,-1)Out[27]: -1</code></pre></blockquote></li></ul></li><li><p>index(sub[,start[,end]]) -&gt; int</p><ul><li>在指定的区间[start,end)，从左至右，查找子串sub。找到返回索引，没找到抛出异常ValueError</li></ul></li><li>rindex(sub[,start[,end]]) -&gt; int<ul><li>在指定的区间[start,end)，从右至左，查找子串sub。找到返回索引，没找到抛出异常ValueError</li></ul></li><li>count(sub[,start[,end]]) -&gt; int<ul><li>在指定的区间[start,end)，从左至右，统计子串sub出现的次数<blockquote><pre><code>In [28]: s.count(&apos;very&apos;)Out[28]: 3In [29]: s.count(&apos;very&apos;,5)Out[29]: 3In [30]: s.count(&apos;very&apos;,10,14)Out[30]: 1</code></pre></blockquote></li></ul></li></ul><p>tip：index和count方法时间复杂度都是O(n)，效率随着列表数据的　　　　增大而下降,建议少用</p><ul><li>len(string) 　　　#返回字符串的长度，即字符的个数</li></ul><h4 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h4><ul><li>endswith(suffix[,start[,end]]) -&gt; bool<ul><li>判断在指定的区间[start,end),字符串是都是suffix结尾</li></ul></li><li>startswith(prefix[,start[,end]]) -&gt; bool<ul><li>判断在指定的区间[start,end),字符串是都是prefix结尾</li></ul></li></ul><h4 id="字符串判断is系列"><a href="#字符串判断is系列" class="headerlink" title="字符串判断is系列"></a>字符串判断is系列</h4><ul><li>isalnum() -&gt; bool　　 #判断是否是i字母和数字组成</li><li>iisalpha()　　#判断是否是字母</li><li>isdecimal()　　#判断是否只包含十进制数字</li><li>isdigit()　　 #判断是否是数字(0~9)</li><li>islower()　　 #判断是否都是小写</li><li>isupper()　　#判断是否都是大写</li><li>isspace()　　#判断是否只包含空白字符</li><li>isidentifier()　　#判断是否是字母和下划线开头,其他都是字母、数字、下划线</li></ul><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><ul><li>字符串的格式化是一种拼接字符串输出样式的手段，更灵活方便<ul><li>join拼接只等使用分隔符，且要求被拼接的是可迭代对象</li><li><ul><li>拼接字符串还算方便，但是非字符串需要先转换为字符串才能拼接</li></ul></li></ul></li><li>在2.5版本之前，只能使用ptintf style枫阁的print输出（了解即可）<ul><li>printf-style formatting，来自C语言的printf函数</li><li>格式要求<ul><li>占位符：使用%和格式字符组成，例如%s，%d等<ul><li>s调用str()，r调用repr()。所有对象都可以被这两个转换</li></ul></li><li>占位符中还可以插入修饰字符，例如%03d表示打印3个位置，不够前面补零</li><li>format % values，格式字符串和被格式的值之间使用%分割</li><li>values只能是一个对象，或是一个和字符串占位符数目相等的元组，或一个字典</li></ul></li></ul></li><li><p>format函数格式字符串语法（Python中推荐使用）</p><ul><li>“{} {xxx}”.format(*agrs,**kwargs) -&gt; str<ul><li>args是位置参数，是一个元组</li><li>kwargs是关键字参数，是一个字典</li><li>花括号表示占位符</li><li>{}表示按照顺序匹配直至参数，{n}表示取位置参数索引为n的值</li><li>{xxx}表示在关键字参数中搜索名称一致的</li></ul></li><li>位置参数<ul><li>“”{}:{}”.format(‘172.16.120.8’,8888)”这就是按照位置顺序用位置参数替换前面的格式字符串的占位符中<blockquote><pre><code>In [31]: &quot;{}:{}&quot;.format(&apos;172.16.120.8&apos;,8888)Out[31]: &apos;172.16.120.8:8888&apos;</code></pre></blockquote></li></ul></li></ul></li><li><p>关键字参数或命名参数</p><ul><li>“{server} {1}:{0}”.form(8888,’172.16.120.8’,server=’Web Server Info:’),位置 参数按照序号匹配，关键字参数按照名词匹配<blockquote><pre><code>In [32]: &quot;{server} {1}:{0}&quot;.format(8888,&apos;172.16.120.8&apos;,server=&apos;Web Server Info:&apos;)Out[32]: &apos;Web Server Info: 172.16.120.8:8888&apos;</code></pre></blockquote></li></ul></li></ul><ul><li><p>访问元素</p><blockquote><pre><code>In [35]: &quot;{0[0]}.{0[1]}&quot;.format((&apos;tao&apos;,&apos;com&apos;))Out[35]: &apos;tao.com&apos;</code></pre></blockquote></li><li><p>对象属性访问</p><blockquote><pre><code>In [39]: from collections import namedtupleIn [40]: Point = namedtuple(&apos;Point&apos;,&apos;x y&apos;)In [41]: p = Point(4,5)In [42]: &quot;{{{0.x},{0.y}}}&quot;.format(p)Out[42]: &apos;{4,5}&apos;</code></pre></blockquote></li><li><p>对齐</p><blockquote><pre><code>In [43]: &apos;{0}*{1}={2:&lt;2}&apos;.format(3,2,2*3)Out[43]: &apos;3*2=6 &apos;In [44]: &apos;{0}*{1}={2:&lt;02}&apos;.format(3,2,2*3)Out[44]: &apos;3*2=60&apos;In [45]: &apos;{0}*{1}={2:&gt;02}&apos;.format(3,2,2*3)Out[45]: &apos;3*2=06&apos;In [46]: &apos;{:^10}&apos;.format(&apos;centered&apos;)Out[46]: &apos; centered &apos;In [47]: &apos;{:*^10}&apos;.format(&apos;centered&apos;)Out[47]: &apos;*centered*&apos;</code></pre></blockquote></li><li><p>进制</p><blockquote><pre><code>In [48]: &quot;int:{0:d}; hex:{0:x}; oct:{0:o}；bin:{0:b}&quot;.format(42)Out[48]: &apos;int:42; hex:2a; oct:52；bin:101010&apos;In [49]: &quot;int:{0:d}; hex:{0:#x}; oct:{0:#o}；bin:{0:#b}&quot;.format(42)Out[49]: &apos;int:42; hex:0x2a; oct:0o52；bin:0b101010&apos;In [51]: octets = [172,16,1,1]In [52]: &apos;{:02X}{:02X}{:02X}{:02X}&apos;.format(*octets)Out[52]: &apos;AC100101&apos;</code></pre></blockquote></li></ul><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h3><ul><li>一个队列，一个排列整齐的队伍</li><li>列表内的个体称作元素，有若干元素组成列表</li><li>元素可以说任意对象（数字、字符串、对象、列表等）</li><li>列表内元素有顺序，可以用索引</li><li>列表是线性的数据结构</li><li>使用[]表示</li><li>列表是可变的</li></ul><h4 id="列表list定义-初始化"><a href="#列表list定义-初始化" class="headerlink" title="列表list定义 初始化"></a>列表list定义 初始化</h4><ul><li>list() -&gt; new empty list</li><li>list(iterable) -&gt; new list initialized from iterables’s items</li><li>列表一开始不能定义大小</li></ul><blockquote><pre><code>In [1]: lst = list()In [2]: print(type(lst))&lt;class &apos;list&apos;&gt;In [3]: lst1 = []In [4]: print(type(lst1))&lt;class &apos;list&apos;&gt;In [5]: lst1Out[5]: []In [6]: lst2 = [1,3,5,&apos;ab&apos;]In [7]: lst2Out[7]: [1, 3, 5, &apos;ab&apos;]In [8]: lst3 = list(range(5))In [9]: lst3Out[9]: [0, 1, 2, 3, 4]</code></pre></blockquote><h4 id="列表索引访问"><a href="#列表索引访问" class="headerlink" title="列表索引访问"></a>列表索引访问</h4><ul><li>list[index]，index就是索引，使用中括号访问</li><li>索引，也叫下标</li><li>正索引：从左至右，从0开始，为列表中每一个元素编号</li><li>负索引：从右至左，从-1开始</li><li>政府索引不可超界，否则引发异常IndexError          </li></ul><h4 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h4><ul><li>index(value,[start,[stop]])<ul><li>通过值value，从制定区间查找列表内的元素是否匹配</li><li>匹配到第一个就立即返回索引</li><li>匹配不到，抛出异常ValueError</li></ul></li><li>count(value)<ul><li>返回列表中匹配value的次数</li></ul></li></ul><h4 id="列表元素修改"><a href="#列表元素修改" class="headerlink" title="列表元素修改"></a>列表元素修改</h4><ul><li>索引访问修改（索引不要超界)<blockquote><pre><code>In [13]: lstOut[13]: [1, &apos;b&apos;, &apos;c&apos;]In [14]: lst[0] = &apos;a&apos;In [15]: lstOut[15]: [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</code></pre></blockquote></li></ul><h4 id="列表增加、插入元素"><a href="#列表增加、插入元素" class="headerlink" title="列表增加、插入元素"></a>列表增加、插入元素</h4><ul><li>append(object) -&gt; None<ul><li>列表尾部追加元素，返回None</li><li>返回None就意味着没右新的列表产生，所以append()是就地修改</li><li>时间复杂度是O(1)</li></ul></li><li>insert(index,object) -&gt; None<ul><li>在指定的索引index出插入元素object</li><li>返回None就意味着没右新的列表产生，所以insert()也是就地修改</li><li>时间复杂度是O(1)</li><li>索引超越上界，则尾部追加，超越下界，则头部追加</li></ul></li><li>extend(iteratable) -&gt; None<ul><li>将可迭代对象的元素追加进来，返回None</li><li>也是就地修改</li></ul></li><li>+ -&gt; list<ul><li>连接操作，将两个列表连接起来</li><li>产生新的列表，原列表不变</li><li>本质上调用的是<em>add</em>()方法</li></ul></li><li><ul><li>-&gt; list</li></ul><ul><li>重复操作，将本列表的元素重复n此，返回新的列表</li></ul></li></ul><h4 id="列表删除元素"><a href="#列表删除元素" class="headerlink" title="列表删除元素"></a>列表删除元素</h4><ul><li>remove(value) -&gt; None<ul><li>从左至右查找第一个匹配value的值，移除该元素，返回None</li><li>就地修改</li></ul></li><li>pop([index]) -&gt; item<ul><li>不指定索引index，就从列表尾部弹出一个元素</li><li>指定索引index，就从索引出弹出一个元素，索引超界抛出IndexError错误</li></ul></li><li>clear() -&gt; None<ul><li>清除列表所有元素，只剩一个空列表</li></ul></li></ul><h4 id="列表其他操作"><a href="#列表其他操作" class="headerlink" title="列表其他操作"></a>列表其他操作</h4><ul><li>reverse() -&gt; None<ul><li>将列表元素反转，返回None</li><li>就地修改</li></ul></li><li>sort(key=None,reverse=False) -&gt; None<ul><li>对列表元素进行排序，就地修改，默认升序</li><li>reverse为True，反转，降序</li><li>key是一个函数，指定key如何排序<ul><li>ist.sort(key=functionname)</li></ul></li></ul></li><li>in<ul><li>判断元素是否在列表中，返回bool<blockquote><pre><code>In [1]: [3,4] in [1,2,[3,4]]Out[1]: True</code></pre></blockquote></li></ul></li></ul><h4 id="列表复制"><a href="#列表复制" class="headerlink" title="列表复制"></a>列表复制</h4><ul><li>copy() -&gt; list<ul><li>shadow copy返回一个新的列表<ul><li>影子拷贝，也叫浅拷贝，遇到引用类型，只是复制了一个引用而已</li></ul></li><li>深拷贝<ul><li>copy模块提供了deepcopy</li></ul></li></ul></li></ul><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><ul><li>一个有序的元素组成的集合</li><li>使用小括号()表示</li><li>元祖是不可变对象</li></ul><h4 id="元组的定义、初始化"><a href="#元组的定义、初始化" class="headerlink" title="元组的定义、初始化"></a>元组的定义、初始化</h4><ul><li>定义<ul><li>tuple() -&gt; empty tuple</li><li>tuple(iterable) -&gt; initialized from iterable’s items<blockquote><pre><code>In [19]: t = tuple()In [20]: print(type(t))&lt;class &apos;tuple&apos;&gt;In [21]: t1 = ()In [22]: print(type(t1))&lt;class &apos;tuple&apos;&gt;In [23]: t2 = tuple(range(1,7,2))In [24]: t2Out[24]: (1, 3, 5)In [25]: print(type(t2))&lt;class &apos;tuple&apos;&gt;In [26]: t = (1,)In [27]: tOut[27]: (1,)In [28]: print(type(t))&lt;class &apos;tuple&apos;&gt;</code></pre></blockquote></li></ul></li></ul><h4 id="元祖元素的访问"><a href="#元祖元素的访问" class="headerlink" title="元祖元素的访问"></a>元祖元素的访问</h4><ul><li>支持索引（下标）</li><li>正索引：从左至右，从0开始，为列表中每一个元素编号</li><li>负索引：从右至左，从-1开始</li><li>索引不可越界，否则引发异常IndexError</li><li>元组通过索引访问<ul><li>tuple[index],index就是索引，使用中括号访问</li></ul></li></ul><h4 id="元组查询"><a href="#元组查询" class="headerlink" title="元组查询"></a>元组查询</h4><ul><li>index(value,[start,[stop]])<ul><li>通过值value，从指定区间查找列表内的元素是否匹配</li><li>匹配到第一个就立即返回索引</li><li>匹配不到，则抛出异常ValueError</li></ul></li><li>conut(value)<ul><li>返回 列表中匹配value的次数  </li></ul></li></ul><p>　tip：index和conut方法的时间复杂度都是O(n)，且效率随着元组数据　　　规模的增大而下降</p><ul><li>len(tuple)<ul><li>返回该元组元素的个数</li></ul></li></ul><h4 id="元组的其他操作"><a href="#元组的其他操作" class="headerlink" title="元组的其他操作"></a>元组的其他操作</h4><ul><li>元祖是只读的，所以没有增、删、改方法</li></ul><h4 id="命名元组"><a href="#命名元组" class="headerlink" title="命名元组"></a>命名元组</h4><ul><li>namedtumple(typename,field_names,verbose=False,rename=False)<ul><li>命名元组，返回一个元组的子类，并定义了字段</li><li>field_nameds可以是空格或逗号分割的字段的字符段，可以是字符的列表<blockquote><pre><code>In [29]: from collections import namedtupleIn [30]: Point = namedtuple(&apos;_Point&apos;,[&apos;x&apos;,&apos;y&apos;])In [31]: p = Point(11,12)In [32]: pOut[32]: _Point(x=11, y=12)In [33]: Student = namedtuple(&apos;Student&apos;,&apos;name age&apos;)In [34]: tom = Student(&apos;tom&apos;,20)In [35]: tom.nameOut[35]: &apos;tom&apos;</code></pre></blockquote></li></ul></li></ul><h2 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h2><h3 id="集-set"><a href="#集-set" class="headerlink" title="集(set)"></a>集(set)</h3><ul><li>约定<ul><li>set翻译为集合</li><li>collection翻译为集合类型，是一个大概念</li></ul></li><li>set<ul><li>可变的、无序的、不重复的元素的集合</li></ul></li></ul><h4 id="set的元素"><a href="#set的元素" class="headerlink" title="set的元素"></a>set的元素</h4><ul><li>set的元素要求必须可以hash</li><li>目前学过的不可hash的类型哟list、set</li><li>元素不可以索引</li><li>set可以迭代</li></ul><h4 id="set的增加"><a href="#set的增加" class="headerlink" title="set的增加"></a>set的增加</h4><ul><li>add(elem)<ul><li>增加一个元素到set中</li><li>如果元素存在，则什么都不做</li></ul></li><li>update(*others)<ul><li>合并其他元素到set集合中来</li><li>参数others必须是可迭代对象</li><li>就地修改</li></ul></li></ul><h4 id="set删除"><a href="#set删除" class="headerlink" title="set删除"></a>set删除</h4><ul><li>remove(elem)<ul><li>从set中移除一个元素</li><li>元素不存在，抛出KeyError异常</li></ul></li><li>discard（elem）<ul><li>从set中移除一个元素</li><li>元素不存在，则什么都不做</li></ul></li><li>pop() -&gt; item<ul><li>移除并返回任意的元素</li><li>空集返回KeyError</li></ul></li><li>clear()<ul><li>移除所有元素</li></ul></li></ul><h4 id="set修改、查询"><a href="#set修改、查询" class="headerlink" title="set修改、查询"></a>set修改、查询</h4><ul><li>修改<ul><li>要么删除、要么加入新的元素，没有修改</li></ul></li><li>查询<ul><li>非线性结构，无法索引</li></ul></li><li>遍历<ul><li>可以迭代所有元素</li></ul></li><li>成员运算符<ul><li>in 和 not in可判断元素是否在set中   </li></ul></li></ul><h4 id="set和线性结构"><a href="#set和线性结构" class="headerlink" title="set和线性结构"></a>set和线性结构</h4><ul><li>线性结构的查询时间复杂度是O(n)，即随着数据规模的增大而增加耗时</li><li>set、dict等结构，内部使用hash值作为key，时间复杂度可以做到O(1)，查询时间和数据规模无关</li><li>可hash<ul><li>数值型int、float、complex</li><li>布尔型True、False</li><li>字符串string、bytes</li><li>tuple</li><li>None</li><li>以上都是不可变类型，成为可哈希类型，hashable</li></ul></li><li>set的元素必须是可hash的</li></ul><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h3><ul><li>key-value键值对的数据的集合</li><li>可变的、无序的、key不可重复</li></ul><h4 id="字典dict定义、初始化"><a href="#字典dict定义、初始化" class="headerlink" title="字典dict定义、初始化"></a>字典dict定义、初始化</h4><ul><li>d = dict() 或 d= {}</li><li>dict(**kwargs)使用name=value对初始化一个字典</li><li>dict(iterable,**kwarg)使用可迭代对象和name=value对构造字典，不过可迭代对象的元素必须是一个二元结构<ul><li>d = dict(((1,’a’),(2,’b’)))或者d = dict(([1,’a’],[2,’b’]))</li></ul></li><li>dict(mapping,**kwarg)使用一个字典构建另一个字典</li><li>d = {‘a’:10,’b’:20,’c’:None,’d’:[123]}</li><li>类方法dict.fromkeys(iterable,value)<ul><li>d = dict.fromkeys(range(5))</li><li>d = dict.fromkeys(range(5),0)</li></ul></li></ul><h4 id="字典元素的访问"><a href="#字典元素的访问" class="headerlink" title="字典元素的访问"></a>字典元素的访问</h4><ul><li>d[key]<ul><li>返回key对应的值value</li><li>key不存在抛出KeyError异常</li></ul></li><li>get(key[,default])<ul><li>返回key对应的值value</li><li>key不存在返回缺省值，如果没有设置缺省值就返回None</li></ul></li><li>setdefault(key[,default])<ul><li>返回key对应的值value</li><li>key不存在，添加kv对，value为default，并返回default，如果default没有设置，缺省为Nome</li></ul></li></ul><h4 id="字典增加和修改"><a href="#字典增加和修改" class="headerlink" title="字典增加和修改"></a>字典增加和修改</h4><ul><li>d[key] = value<ul><li>将key对应的值修改为value</li><li>key不存在则添加新的kv对</li></ul></li><li>update([other]) -&gt; None<ul><li>使用另外一个字典的kv对更新本字典</li><li>key不存在，则添加</li><li>key存在，覆盖已经存在的key对应的值</li><li>就地修改<blockquote><pre><code>eg: d.update(red=1)    d.update((&apos;red&apos;,2),)    d.update({&apos;red&apos;:1})</code></pre></blockquote></li></ul></li></ul><h4 id="字典删除"><a href="#字典删除" class="headerlink" title="字典删除"></a>字典删除</h4><ul><li>pop(key[,default])<ul><li>key存在，移除，并返回它的key</li><li>key不存在，返回给定的default</li><li>default未设置，key不存在则抛出KeyError异常</li></ul></li><li>popitem()<ul><li>移除并返回一个任意的键值对</li><li>字典为empty，抛出KeyError异常</li></ul></li><li>clear<ul><li>清空字典</li></ul></li><li>del语句<ul><li>del实际上删除的是名称，而不是对象<blockquote><pre><code>In [9]: aOut[9]: TrueIn [10]: bOut[10]: [6]In [11]: dOut[11]: {&apos;a&apos;: 1, &apos;b&apos;: [6], &apos;c&apos;: [1, 3, 5]}In [12]: del aIn [13]: a----------------------------------------------------------NameError               Traceback (most recent call last)&lt;ipython-input-13-3f786850e387&gt; in &lt;module&gt;----&gt; 1 aNameError: name &apos;a&apos; is not definedIn [14]: del d[&apos;c&apos;]In [15]: dOut[15]: {&apos;a&apos;: 1, &apos;b&apos;: [6]}In [16]: del b[0]In [17]: dOut[17]: {&apos;a&apos;: 1, &apos;b&apos;: []}In [18]: bOut[18]: []In [19]: c = bIn [20]: del cIn [21]: c----------------------------------------------------------NameError                Traceback (most recent call last)&lt;ipython-input-21-2b66fd261ee5&gt; in &lt;module&gt;----&gt; 1 cNameError: name &apos;c&apos; is not definedIn [22]: del bIn [23]: b----------------------------------------------------------NameError                Traceback (most recent call last)&lt;ipython-input-23-89e6c98d9288&gt; in &lt;module&gt;----&gt; 1 bNameError: name &apos;b&apos; is not definedIn [24]: b = d[&apos;b&apos;]In [25]: bOut[25]: []</code></pre></blockquote></li></ul></li></ul><h4 id="字典的key"><a href="#字典的key" class="headerlink" title="字典的key"></a>字典的key</h4><ul><li>key的要求和set的元素要求移至<ul><li>hashable可哈希开才可以作为key</li></ul></li></ul><h4 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h4><ul><li><p>for … in dict</p><ul><li>遍历item，即kv对<pre><code>&gt;    for item in d.items():　　  &gt;    　　print(item)  &gt;    for  k,v in d.items():  &gt;    　　print(k,v)　</code></pre></li></ul></li><li><p>总结</p><ul><li>python3中，keys、values、items方法返回一个类似一个生成器的可迭代对象，不会把函数的返回结果复制到内存中</li><li>python2中，上面的方法会返回一个新的列表，占据新的内存空间。所以python2建议使用iterkeys、itervalues、iteritems版本，返回一个迭代器，而不是一个copy</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数值型&quot;&gt;&lt;a href=&quot;#数值型&quot; class=&quot;headerlink&quot; title=&quot;数值型&quot;&gt;&lt;/a&gt;数值型&lt;/h2&gt;&lt;h3 id=&quot;数值型-1&quot;&gt;&lt;a href=&quot;#数值型-1&quot; class=&quot;headerlink&quot; title=&quot;数值型&quot;&gt;&lt;/a&gt;数值
      
    
    </summary>
    
      <category term="Python学习笔记" scheme="http://chomd.club/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://chomd.club/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础语法</title>
    <link href="http://chomd.club/2019/04/11/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://chomd.club/2019/04/11/Python基础语法/</id>
    <published>2019-04-11T05:16:18.000Z</published>
    <updated>2019-04-11T07:31:09.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>Python中单行注释以 # 开头<blockquote><p>实例如下:</p><pre><code>#第一个注释  print (&quot;Hello, Python!&quot;) # 第二个注释     </code></pre><p>执行以上代码，输出结果为：</p><pre><code>Hello, Python!  </code></pre></blockquote></li></ul><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul><li>int (整数), python3.0+中不区分（long和int）  </li><li>bool (布尔), 2个值 True、False。  </li><li>float (浮点数), 如 1.23、-0.12 1.46e9等价与1.46*10⁹  </li><li>complex (复数), 如 1 + 2j </li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>使用’ “单双引号引用的字符的序列  </li><li>‘’’ “””单双三引号，可以跨行使用、可在其中自由的使用单双引号　</li><li>在字符串前面加上r或R前缀，表示该字符不做特殊处理,实例如下：   </li></ul><blockquote><pre><code>print(&apos;hello\nTao&apos;)      # 使用反斜杠(\)+n转义特殊字符   print(r&apos;hello\nTao&apos;)     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义　　</code></pre></blockquote><p>　输出结果如下：    </p><blockquote><pre><code>hello  Tao   hello\nTao     </code></pre></blockquote><h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><ul><li>\\　 \t  　\r 　 \n　  \’ 　 \”  </li><li>前缀r，把里面的所有字符当普通字符对待</li></ul><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li>未使用C语言的花括号，而是采用缩进的方式表示层次关系</li><li>约定使用4个空格缩进（可自定义）</li></ul><h3 id="续行"><a href="#续行" class="headerlink" title="续行"></a>续行</h3><ul><li>在行尾使用反斜杠（\），例如：</li><li>如果使用各种括号，认为括号内是一个整体，内部跨行不用\</li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>1、一个名字，用来指代一个值</li><li>2、只能由字母、下划线和数字组成</li><li>3、只能以字母或下划线开头（不建议使用下划线（_）开头）</li><li>4、不能使python的关键字，例如def、class等就不能作为标识符</li><li>5、Python大小写敏感</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>一旦赋值就不能改变值得标识符</li><li>python中无法定义常量</li></ul><h3 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h3><ul><li>一个单独的量，如45、”abc”、’41561321.135e-8’</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>赋值后，可以改变值得标识符</li></ul><h2 id="运算符（Operator）"><a href="#运算符（Operator）" class="headerlink" title="运算符（Operator）"></a>运算符（Operator）</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><ul><li>+　 -　 *　 、　 %　 **</li><li>自然除/结果是浮点数，整除//是整数。例子：<blockquote><pre><code>print(6/3)  print(6//3)  </code></pre></blockquote></li></ul><blockquote><p>输出结果如下： </p><pre><code>2.0  2</code></pre></blockquote><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li>&amp;　|　~　^　&lt;&lt;　&gt;&gt;</li><li>常用方式：乘除2的倍数，32 // 4想当于32 &gt;&gt; 2</li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>==　 !=　&lt;　&gt;　&lt;=　&gt;=<br>　返回值通常是一个bool值</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>与或非 and or not</li><li>短路运算符　　<br>　　and如果第一个表达式为False，后面就没必要计算了，这个逻　　辑表达式一定是False<br>　　or如果第一个表达式是True，后面也没必要计算了，这个逻辑　　表达式一定是True</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>a = 10</li><li>+=　 -=　 *=　 /=　 %=等</li><li>x=y=z=10</li></ul><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><ul><li>in、not in</li></ul><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><ul><li>is、is not</li></ul><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="有数字、、符号、括号、变量等组合而成"><a href="#有数字、、符号、括号、变量等组合而成" class="headerlink" title="有数字、、符号、括号、变量等组合而成"></a>有数字、、符号、括号、变量等组合而成</h3><ul><li>算数表达式</li><li>逻辑表达式</li><li>赋值表达式<br>Python中，赋值即定义，如果一个变量已经定义，赋值相当于重新定义</li></ul><h2 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ul><li>if condition:<br>　　代码块<br>condition必须是一个bool类型，这个地方有一个隐式转换bool(condition)<br>例子：<blockquote><pre><code>if 1 &lt; 2:  print(&quot;1比2小&quot;)  </code></pre></blockquote></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ul><li>类似于if语句的冒号后面的一个语句块</li><li>在if、for、def、class等中</li></ul><h2 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h2><ul><li>if…elif…else语句<br>if condition1:<br>　　代码块1<br>elif condition2:<br>　　代码块2<br>elif condition3:<br>　　代码块3<br>……<br>else：<br>　　代码块n  </li></ul><p>　　例子：</p><blockquote><pre><code>score = 85if score &gt;= 90:   print(&apos;A&apos;)elif score &gt;=60:   print(&apos;B&apos;)else:   print(&apos;C&apos;)</code></pre></blockquote><h2 id="分支嵌套"><a href="#分支嵌套" class="headerlink" title="分支嵌套"></a>分支嵌套</h2><ul><li>嵌套结构，可以是分支、循环的嵌套，可以是互相嵌套多层  </li></ul><p>　　例子：</p><blockquote><pre><code>score = 85if score &lt;0:   print(&apos;error&apos;)else:   if score &gt;= 90:      print(&apos;A&apos;)   elif score &gt;=60:      print(&apos;B&apos;)   else:      print(&apos;C&apos;)</code></pre></blockquote><h2 id="循环——while语句"><a href="#循环——while语句" class="headerlink" title="循环——while语句"></a>循环——while语句</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>　　while condition:<br>　　　　block </p><ul><li>当条件满足即condition为True时，进入循环体，执行block  <blockquote><p>例子：    </p><pre><code>i = 5while i:    print(i)    i -= 1  </code></pre><p>输出结构如下：   </p><pre><code>54321</code></pre></blockquote></li></ul><h2 id="循环语句——for语句"><a href="#循环语句——for语句" class="headerlink" title="循环语句——for语句"></a>循环语句——for语句</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>　　for element in iteratable:<br>　　　　block</p><ul><li>当可迭代对象中由元素可以迭代，进入循环体，执行block，常与range函数使用<blockquote><p>举例：打印1~10  </p><pre><code>for i in range(10):       print(i+1)</code></pre><p>输出结果如下：</p><pre><code>1 2 3 4 5 6 7 8 9 10</code></pre></blockquote></li></ul><h2 id="循环语句——continue语句"><a href="#循环语句——continue语句" class="headerlink" title="循环语句——continue语句"></a>循环语句——continue语句</h2><ul><li>中断当前循环的当次执行，继续下一次循环  <blockquote><p>举例：计算10以内的偶数(for循环)  </p><p>  for i in range(10):</p><pre><code>if i%2 !=0:    continue    print(i,end=&quot;\t&quot;)</code></pre><p>结果如下：  </p><pre><code>0    2    4    6    8</code></pre></blockquote></li></ul><h2 id="循环语句——else子语句"><a href="#循环语句——else子语句" class="headerlink" title="循环语句——else子语句"></a>循环语句——else子语句</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>　　while condition:<br>　　　　block<br>　　else:<br>　　　　block<br>　　for element in iteratable:<br>　　　　block<br>　　else:<br>　　　　block  </p><ul><li>如果循环正常的结束，就执行else语句；如果使用break终止，else子句不会执行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;h3 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h
      
    
    </summary>
    
      <category term="Python学习笔记" scheme="http://chomd.club/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://chomd.club/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令及相关参数</title>
    <link href="http://chomd.club/2017/12/21/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/"/>
    <id>http://chomd.club/2017/12/21/Linux常用命令及相关参数/</id>
    <published>2017-12-21T10:02:01.000Z</published>
    <updated>2019-03-31T09:56:06.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线上查询及帮助命令"><a href="#线上查询及帮助命令" class="headerlink" title="线上查询及帮助命令"></a>线上查询及帮助命令</h3><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p>适用于一般命令，查看非内置命令的帮助。      </p><h4 id="help"><a href="#help" class="headerlink" title="--help"></a>--help</h4><p>适用于一般命令，查看非内置命令的帮助。      </p><h4 id="help-1"><a href="#help-1" class="headerlink" title="help"></a>help</h4><p>适用于内置命令，查看内置命令的帮助。  </p><h3 id="文件和目录操作命令"><a href="#文件和目录操作命令" class="headerlink" title="文件和目录操作命令"></a>文件和目录操作命令</h3><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>list(列表)   列表目录或文件<br>-l(long)  长格式<br>-d(directorys)  查看目录<br>-p  给目录结尾加斜线（/）<br>-F  给不同目录结尾加不同标识<br>-a(all)  显示所有文件（包括隐藏文件）<br>-t  按修改时间排序<br>-r  反转排序，倒序<br>-i  查看inode节点<br>-h  人类可读<br>--color=auto  显示颜色<br>--time-style=long-iso  格式化时间</p><blockquote><p>例子： 列根(/) 目录下的文件或目录–&gt;ls /   </p></blockquote><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>change directorys  改变目录路径  </p><blockquote><p>例子：cd /etc  </p></blockquote><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>copy    拷贝文件或目录，默认不能拷贝目录<br>-r(recursive) 递归，用于复制目录<br>-p 连同档案的文件属性一起复制过去，而非使用默认属性<br>-d 若源文件为链接文件（link file），则复制链接文件属性而非档案属性<br>-a 相当于-pdr，复制文件保持文件所有属性  </p><blockquote><p>例子:cp  /etc/ssh/sshd_config{,.ori} 等价于 cp  /etc/ssh/sshd_config /etc/ssh/sshd_config.ori</p></blockquote><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>查找<br>-type  文件类型（f(file),d(directory),c(character),b(block)，s(socket),l(link)）<br>-name “文件名”  按文件名称查找文件<br>！  取反<br>-maxdepth  查找深度<br>-mtime 时间   按修改时间查找，时间数字（+7 七天之前，7 第七天，－7 最近七天）    </p><p>mkdir   make directorys  创建目录<br>-p  递归创建目录，一般第一级目录不存在时用-P，否则报错 </p><blockquote><p>例子：在根（/）下创建data目录–&gt;mkdir /data  </p></blockquote><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>move     移动或重命名文件</p><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>print work directory  打印工作目录（显示当前所在路径）</p><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><p>Rename files  重命名文件  </p><blockquote><p>例子:<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i5tv4aj20ou03fq2y.jpg" alt=""></p></blockquote><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>remove   删除文件和目录<br>-r(recursive)      递归删除目录及其内容<br>-f（force）       强制</p><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>创建或更新文件的时间戳，如果文件不存在，就建立新文件，如果存在，就改变文件的访问时间atime等事件戳信息。 </p><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><p>大树的意思，显示目录树<br>-L（layer） 层数<br>-d 显示目录</p><h4 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h4><blockquote><p>例子:<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i5tqkoj20fw028q2t.jpg" alt="">  </p></blockquote><h4 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h4><p>跟basename相反  </p><blockquote><p>例子: <img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i5tscej20e0017jr6.jpg" alt=""></p></blockquote><h4 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h4><p>改变文件的扩展属性<br>a   只能追加内容<br>i    文件加锁</p><h4 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h4><p>显示文件的扩展属性  </p><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>查看文件的类型  </p><h4 id="md5sum"><a href="#md5sum" class="headerlink" title="md5sum"></a>md5sum</h4><p>计算和校验文件的md5值</p><h3 id="查看文件及内容处理命令"><a href="#查看文件及内容处理命令" class="headerlink" title="查看文件及内容处理命令"></a>查看文件及内容处理命令</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>查看文件内容<br>-n  显示行号<br>-b 显示非空行的行号<br>-E  在每一行末尾显示$号<br>-T 区分tab键和空格  </p><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><p>反向显示文件内容</p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>按页一次一屏显示，回车一次一行，空格一次一屏，按b可以一次回退一屏。<br>-=  显示光标所在行行号</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>分页查看文件内容，回车一次一行，空格一次一屏，按b可以一次回退一屏。<br>-N 显示行号</p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>头，头部   读取文件的前n行，默认前十行  </p><blockquote><p>例子： head -2 test.txt</p></blockquote><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>尾，尾巴   读取文件的后n行，默认最后十行    </p><blockquote><p>例子： tail -2 test.txt </p></blockquote><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>切割  取列<br>-d分隔符<br>-f取列 </p><blockquote><p>例子：<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i5ui6xj20dj023jr8.jpg" alt=""></p><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>按照指定的行数或大小分割文件<br>-l 指定行数<br>例子：split -l 10  /etc/inittab new_ </p></blockquote><p>-a 指定生成文件后缀长度 </p><blockquote><p>例子：split -l 10 -a 3 /etc/inittab new1_ </p></blockquote><p>-d 使用数字后缀 </p><blockquote><p>例子：split -l 10 -d /etc/inittab new_ </p></blockquote><p>-b 指定分割大小    </p><blockquote><p>例子split -b 200K /etc/inittab</p></blockquote><h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><p>合并两个文件内容<br>-d 指定分隔符  </p><blockquote><p>例子：paste -d : a b<br><img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i5u91aj20f804sglh.jpg" alt=""></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>默认按照第一列、ASCII码排序，升序， 从小到大<br>-n  按照数值排序<br>-r 倒序，从大到小<br>-k 指定区域<br>-t  指定分隔符<br>例子： sort –t: -k2 oldboy.txt</p></blockquote><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>去除重复行</p><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>统计文件行数 单词数 字节数<br>-l(lines) 显示总行数<br>-L 显示最大行的长度</p><h4 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h4><p>转换文件的编码格式</p><h4 id="dos2unix"><a href="#dos2unix" class="headerlink" title="dos2unix"></a>dos2unix</h4><p>把windows文件格式转换成linux的文件格式<br>windows的换行符是：\r\n<br>linux的换行符：\n</p><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><p>逐行比较文件和目录内的文件不同<br>a 增加<br>c 改变<br>d 删除</p><h4 id="vimdiff"><a href="#vimdiff" class="headerlink" title="vimdiff"></a>vimdiff</h4><p>可视化对比工具</p><h4 id="rev"><a href="#rev" class="headerlink" title="rev"></a>rev</h4><p>反向输出文件内容</p><h4 id="grep-egrep"><a href="#grep-egrep" class="headerlink" title="grep/egrep"></a>grep/egrep</h4><p>Linux三剑客老三……过滤需要的内容<br>-v      后接要排除的内容    </p><blockquote><p>例子：grep oldboy test.txt  </p></blockquote><p>-A      除了显示匹配的一行之外，并显示该行的后num行<br>-B      除了显示匹配的一行之外，并显示该行的前num行<br>-C      除了显示匹配的一行之外，并显示该行的前后num行<br>--color=auto 对过滤的字符串加颜色<br>-E 扩展的grep，即egrep<br>-n  对匹配的内容打印行号<br>-i  不区分大小写<br>-o  按单词搜索，相当于\b</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>按两个文件的相同字段合并</p><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>translate or delete characters(替换或删除字符)</p><blockquote><p>例子：<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i5uaxzj20cd04xa9z.jpg" alt=""></p><h4 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi/vim"></a>vi/vim</h4><p>命令行文本编辑器</p><h3 id="文件压缩及解压缩命令"><a href="#文件压缩及解压缩命令" class="headerlink" title="文件压缩及解压缩命令"></a>文件压缩及解压缩命令</h3><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>打包压缩<br>（z c v f j x X N p P C --exclude）</p><h4 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h4><p>解压文件</p><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><p>gzip压缩工具</p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>压缩工具</p><h3 id="信息显示命令"><a href="#信息显示命令" class="headerlink" title="信息显示命令"></a>信息显示命令</h3><h4 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h4><p>显示操作系统相关的命令</p><h4 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h4><p>显示或者设置当前系统的主机名</p><h4 id="dmesg"><a href="#dmesg" class="headerlink" title="dmesg"></a>dmesg</h4><p>显示开机信息，可以查看系统故障信息</p><h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h4><p>显示系统运行时间及负载</p><h4 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h4><p>显示文件和文件系统状态（查看文件属性）</p><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><p>查看文件和目录大小<br>-sh</p><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>查看磁盘信息<br>–I<br>–h<br>–T 文件类型</p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>实时显示系统资源使用情况</p><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>查看系统内存</p><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>显示与设置系统时间<br>-d 显示字符串所指的日期与时间。字符串前后必须加上双引号<br>-s 根据字符串来设置日期与时间。字符串前后必须加上双引号<br>%Y 表示年<br>%m 表示月<br>%d 表示天<br>%H 表示小时（表示的时间是00-23）<br>%M 表示分钟<br>%S 表示秒<br>%s（表示unix时间戳的秒数）<br>例子：[root@zht ~]# date +’%Y-%m-%d %H:%M:%S’<br>2017-12-21 22:16:12</p><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><p>查看日历等时间信息</p><h3 id="搜索文件命令"><a href="#搜索文件命令" class="headerlink" title="搜索文件命令"></a>搜索文件命令</h3><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>查看二进制命令所在路径（从PATH变量所在的路径查找）</p><h4 id="find-1"><a href="#find-1" class="headerlink" title="find"></a>find</h4><p>从磁盘遍历查找文件或目录<br>-type 文件类型（f(file),d(directory),c(character),b(block)，s(socket),l(link)）<br>-name “文件名”  按文件名称查找文件<br>！  取反<br>-maxdepth 查找深度<br>-mtime 时间   按修改时间查找，时间数字（+7 七天之前，7 第七天，－7 最近七天）<br><img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1ier1plj20wo08twof.jpg" alt=""></p><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>查看命令的帮助、源代码<br>-b 二进制</p><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><p>通过名字查找文件<br>这个命令只能查updatedb库里内容，locate从/var/lib/mlocate/mlocate.db查找路径</p><h3 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h3><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><p>添加用户<br>用法：useradd 用户名<br>-s  指定用户登入后所使用的shell (-s  /sbin/nologin)<br>–u 指定uid<br>-c  注释<br>-d (指定家目录)<br>-G 指定属于多个组<br>-m 创建家目录<br>-g 指定属于的组<br>–e 指定过期时间<br>-M 不创建家目录  </p><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><p>更改用户属性</p><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><p>删除用户<br>-r 删除家目录</p><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4><p>添加组<br>-g 组id</p><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><p>删除组</p><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>为用户设置或修改密码<br>--stdin  非交互式更改密码<br>例子：echo “123456”|passwd –stdin oldboy</p><h4 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h4><p>设置或修改用户密码有效期限<br>-l(list)列表<br>-E将用户过期时间设置为“过期日期”<br><img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i7brzkj20ev08egqa.jpg" alt=""></p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>查看用户和组信息</p><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><p>切换用户身份   </p><ul><li>加载环境变量<br>-c 以指定用户切换身份<h4 id="visudo"><a href="#visudo" class="headerlink" title="visudo"></a>visudo</h4>通过visudo编辑/etc/sudoers，可以检查语法<h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4>可以让普通用户拥有root权限去执行命令<br>sudo的配置文件为/etc/sudoers<h3 id="基础网络操作命令"><a href="#基础网络操作命令" class="headerlink" title="基础网络操作命令"></a>基础网络操作命令</h3><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4>使用TELNET协议远程登陆<h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4>使用SSH加密协议远程登陆<h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4>远程拷贝文件或目录的命令<br> -P (port) 接端口，默认22端口时可以省略-P22<br> -r      递归，表示拷贝目录<br> -p      表示再拷贝前后保持文件或目录的属性<br> -l (limit)  限制速度  <h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4>命令行下载命令<br>-q 安静的<br>-O 指定文件名<h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4>测试主机之间网络的连通性（使用ICMP协议，是TCP/IP协议族的一个子协议）<h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4>显示和设置linux系统的路由表<h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4>查看、配置、启用或禁用网落接口的命令<h4 id="ifup"><a href="#ifup" class="headerlink" title="ifup"></a>ifup</h4>启动网卡<h4 id="ifdown"><a href="#ifdown" class="headerlink" title="ifdown"></a>ifdown</h4>关闭网卡<h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4>查看网络状态<br>-lntup<br>-a查看所有<br>例子:<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i5x09hj20fq02rweb.jpg" alt=""></li></ul></blockquote><h4 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h4><p>查看网络状态</p><h3 id="深入网络操作命令"><a href="#深入网络操作命令" class="headerlink" title="深入网络操作命令"></a>深入网络操作命令</h3><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>网络扫描命令</p><h4 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h4><p>list open files 列举操作系统中已经被打开的文件</p><blockquote><p>例子：<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1i7d6rtj20bw02eglh.jpg" alt=""></p></blockquote><h4 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h4><p>发送和接收邮件</p><h4 id="mutt"><a href="#mutt" class="headerlink" title="mutt"></a>mutt</h4><p>邮件管理命令</p><h4 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h4><p>交互式查询互联网DNS服务器的命令</p><h4 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h4><p>查找DNS解析过程</p><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p>查询DNS命令</p><h4 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h4><p>追踪数据传输路由状况</p><h4 id="tcpdum"><a href="#tcpdum" class="headerlink" title="tcpdum"></a>tcpdum</h4><p>命令行的抓包工具</p><h3 id="有关磁盘和文件系统的命令"><a href="#有关磁盘和文件系统的命令" class="headerlink" title="有关磁盘和文件系统的命令"></a>有关磁盘和文件系统的命令</h3><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><p>挂载文件系统<br>-t type<br>–o </p><h4 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h4><p>卸载文件系统<br>-lF 强制卸载</p><h4 id="fsck"><a href="#fsck" class="headerlink" title="fsck"></a>fsck</h4><p>检查并修复linux文件系统</p><h4 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h4><p>转换和拷贝文件（convert and copy a file）</p><h4 id="dumpe2fs"><a href="#dumpe2fs" class="headerlink" title="dumpe2fs"></a>dumpe2fs</h4><p>查看ext文件系统信息</p><h4 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h4><p>ext文件系统备份工具</p><h4 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h4><p> 磁盘分区工具（&lt;2T）<br>-l 列表</p><h4 id="parted"><a href="#parted" class="headerlink" title="parted"></a>parted</h4><p>分区工具（常用大于2T）</p><h4 id="mkfs"><a href="#mkfs" class="headerlink" title="mkfs"></a>mkfs</h4><p>格式化<br>-b block<br>–I inode<br>用法：mkfs.ext4等价于mkfs –t ext4 </p><h4 id="partprobe"><a href="#partprobe" class="headerlink" title="partprobe"></a>partprobe</h4><p>让分区表的修改变化通知内核</p><h4 id="e2fsck"><a href="#e2fsck" class="headerlink" title="e2fsck"></a>e2fsck</h4><p>检查ext类型文件系统</p><h4 id="mkswap"><a href="#mkswap" class="headerlink" title="mkswap"></a>mkswap</h4><p>格式化swap分区</p><h4 id="swapon"><a href="#swapon" class="headerlink" title="swapon"></a>swapon</h4><p>启用交换分区</p><h4 id="swapoff"><a href="#swapoff" class="headerlink" title="swapoff"></a>swapoff</h4><p>关闭交换分区</p><h4 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h4><p>将内存缓冲区内容的数据写入磁盘</p><h4 id="resize2fs"><a href="#resize2fs" class="headerlink" title="resize2fs"></a>resize2fs</h4><p>调整ext类型文件系统大小</p><h3 id="系统权限及用户授权相关命令"><a href="#系统权限及用户授权相关命令" class="headerlink" title="系统权限及用户授权相关命令"></a>系统权限及用户授权相关命令</h3><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>更改及设置文件对应权限</p><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><p>更改及设置文件对应的用户和组</p><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><p>更改文件用户组</p><h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h4><p>控制文件默认权限<br>默认情况下的umask值是022(可以用umask命令查看），此时建立的文件默认权限是644(6-0,6-2,6-2)，建立的目录的默认权限是755(7-0,7-2,7-2)</p><p>###查看系统用户登录信息的命令</p><h4 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h4><p>显示当前有效的用户名称，相当于执行id -un命令</p><h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><p>显示目前登陆系统的用户信息</p><h4 id="w"><a href="#w" class="headerlink" title="w"></a>w</h4><p>显示已经登陆系统的用户列表，并显示用户正在执行的指令</p><h4 id="last"><a href="#last" class="headerlink" title="last"></a>last</h4><p>显示用户登陆的历史</p><h4 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h4><p>所有计算机用户最近的登陆情况</p><h4 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h4><p>查找并显示用户信息</p><h3 id="内置命令及其他"><a href="#内置命令及其他" class="headerlink" title="内置命令及其他"></a>内置命令及其他</h3><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><p>是一个打印输出内容的一个常用命令，配合“&gt;”或“&gt;&gt;”可以为文件覆盖或追加内容。<br>-n  不换行输出<br>-e  可用转义字符（\n 回车， \t，  Tab键）<br>“&gt;”意思为重定向，会清楚文件里所有以前数据，“&gt;&gt;”为内容追加，只在文件尾部追加需要的内容，还有一个比较复杂不常用的类似命令printf.</p><h4 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h4><p>将结果格式化输出到标准输出</p><h4 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h4><p>管理rpm包的命令<br>-q query<br>-a all<br>-f file<br>查询一个命令属于哪个包<br>[root@m01 ~]# rpm -qf /bin/ls<br>coreutils-8.4-43.el6.x86_64<br>知识点：<br>-q or -query<br>-f, --file               query/verify package(s) owning file<br>[root@m01 ~]# rpm -qa coreutils<br>coreutils-8.4-43.el6.x86_64<br>知识点：<br>-a, --all               query/verify all packages<br>卸载：<br>rpm –e –nodeps 包名<br>-e, --erase=<package>+   erase (uninstall) package<br>--nodeps        don’t verify package dependencies<br>--force          short hand for --replacepkgs –replacefiles  </package></p><p>安装：<br>rpm -ivh  包名<br>升级：<br>rpm -Uvh  包名<br>-i, --install      install package(s)<br>-h, --hash      print hash marks as package installs (good with -v)<br>-v, --verbose               provide more detailed output<br>-U, --upgrade=<packagefile>+     upgrade package(s)<br>查看包里有哪些文件<br>[root@m01 ~]# rpm -ql tree<br>/usr/bin/tree<br>/usr/share/doc/tree-1.5.3<br>/usr/share/doc/tree-1.5.3/LICENSE<br>/usr/share/doc/tree-1.5.3/README<br>/usr/share/man/man1/tree.1.gz<br>知识点：<br>-l, --list                list files in package  </packagefile></p><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><p>自动化简单化地管理rpm包的命令</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>周期性执行程序，打印到目录，默认2秒<br>-n 制定秒</p><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><p>查看和设置别名<br>设置别名：  alias cp=’cp -i’</p><h4 id="unalias"><a href="#unalias" class="headerlink" title="unalias"></a>unalias</h4><p>取消已有别名</p><blockquote><p>例子：unalias mv–&gt;   取消mv别名</p></blockquote><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p>清屏，相当于快捷键Ctrl+l</p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>查看及清理历史记录<br> -c   清空所有<br>  -d 删除指定历史记录</p><h4 id="eject"><a href="#eject" class="headerlink" title="eject"></a>eject</h4><p>弹出光驱</p><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>计算命令执行时间</p><h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h4><p>功能强大的网络工具</p><h4 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h4><p> 显示行号 （number lines） </p><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><p>从标准输入（管道过stdin、输入重定向）获取数据，并将数据转换成命令行的参数<br>-n 数字  分组</p><blockquote><p>例子：<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1m1idj53pj20iz05nq6s.jpg" alt=""></p></blockquote><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>调用并执行指定的命令</p><h4 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h4><p>删除变量或函数</p><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><p>设置或显示环境变量</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>用于判断另外一个命令是否是内置命令</p><h4 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h4><p>命令行科学计算器</p><h4 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h4><p>文件复制工具<br>-v  --verbose   详细模式输出，传输时的进度等信息<br>-z  --compress  传输时进行压缩以提高传输效率<br>--compress-level=NUM 可按级别压缩<br>-a  --archive    归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rtopgDl<br>-r  --recursive  对子目录以递归模式，即目录下的所有目录都同样输出，注意是小写r<br>-t  --times   保持文件时间信息<br>-o  --owner  保持文件属主信息<br>-p  --perms  保持文件权限<br>-g  --group   保持文件属组信息<br>-P  --progress 显示同步的过程及传输时的进度等信息<br>-D  --devices  保持设备文件信息<br>-l   --links     保持软连接<br>-e   --rsh=COMMAND  使用的信道协议，指定替代rsh的shell程序。<br>例如：ssh--exclude=PATTERN 指定排除不需要传输的文件模式（和tar参数一样）<br>--exclude-from=file（文件名所在的目录文件）（和tar参数一样）<br>--bwlimit=RATE  limit socket I/O bandwidth<br>--delete  让目标目录SRC和源目录数据DST一致  </p><h3 id="系统管理与性能监视命令"><a href="#系统管理与性能监视命令" class="headerlink" title="系统管理与性能监视命令"></a>系统管理与性能监视命令</h3><h4 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h4><p>设置开机自启动的命令<br>--list  查看自启动服务<br>--level levels</p><blockquote><p>例子：chkconfig  –level levels sshd off(on)  levels：运行级别</p><p>chkconfig  –list  显示所有服务</p><p>chkconfig  –list sshd  查看指定服务是否开机自启动。</p></blockquote><h4 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h4><p>虚拟内存统计</p><h4 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h4><p>显示各个可用CPU的状态</p><h4 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h4><p>统计系统IO</p><h4 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h4><p>全面地获取系统的CPU、运行队列、磁盘I/O、分页（交换区）、内存、CPU中断和网络等性能数据</p><h4 id="ipcs"><a href="#ipcs" class="headerlink" title="ipcs"></a>ipcs</h4><p>用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息</p><h4 id="ipcrm"><a href="#ipcrm" class="headerlink" title="ipcrm"></a>ipcrm</h4><p>用来删除一个或更多的消息队列、信号量集或者共享内存标识</p><h4 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h4><p>用于诊断、调试Linux用户空间追踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</p><h4 id="ltrace"><a href="#ltrace" class="headerlink" title="ltrace"></a>ltrace</h4><p>命令会跟踪进程的库函数调用，它会显示出那个库函数被调用</p><h3 id="关机-重启-注销和查看系统信息的命令"><a href="#关机-重启-注销和查看系统信息的命令" class="headerlink" title="关机/重启/注销和查看系统信息的命令"></a>关机/重启/注销和查看系统信息的命令</h3><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>关机</p><h4 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h4><p>关机</p><h4 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h4><p>关闭电源</p><h4 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h4><p>退出当前登陆的shell，相当于快捷键Ctrl+d</p><h4 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h4><p>退出当前登陆的shell，相当于快捷键Ctrl+d</p><h3 id="进程管理相关命令"><a href="#进程管理相关命令" class="headerlink" title="进程管理相关命令"></a>进程管理相关命令</h3><h4 id="bg"><a href="#bg" class="headerlink" title="bg"></a>bg</h4><p>讲一个在后台暂停的命令，变成继续执行（在后台执行）</p><h4 id="fg"><a href="#fg" class="headerlink" title="fg"></a>fg</h4><p>将后台中的命令调至前台继续运行</p><h4 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h4><p>查看当前有多少在后天运行的命令</p><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>终止进程</p><h4 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h4><p>通过进程名终止进程</p><h4 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a>pkill</h4><p>通过进程名终止进程</p><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p>定时任务命令。维护用户的crontab配置文件。<br>-e（edit）<br>-l（list）<br>-r（erase）  </p><blockquote><p>如：xufqin用户创建一个新的crontab配置文件。<br>$ crontab –e </p></blockquote><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p>设置指定时间执行的指定的命令。（只执行一次）<br>–f  文件名（file）<br>-l（list）<br>-d（delete）</p><blockquote><p>例子：在3分钟后向文件/tmp/test/test.txt写入信息“Hello”。<br>$at now + 3 minutes<br>at&gt;echo “Hello” &gt;&gt; /tmp/test.txt<br>然后按Ctrl+D保存</p></blockquote><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>显示进程的状态。无选项时显示当前用户在当前终端启动的进程<br>-a（all）<br>-e<br>-l（list）<br>-u（user）<br>-x<br>-t<br>-f </p><h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><p>树形显示进程</p><h4 id="nice"><a href="#nice" class="headerlink" title="nice"></a>nice</h4><p>指定将启动的进程的优先级。不指定优先级值时，将优先级设置为10</p><blockquote><p>例子：#nice  -5  ftp<br>启动ftp程序，其优先级为5</p></blockquote><h4 id="renice"><a href="#renice" class="headerlink" title="renice"></a>renice</h4><p>修改运行中的进程的优先级，设定指定用户或组群的进程优先级<br>-p  进程号<br>-u  用户名<br>-g  组群号</p><blockquote><p>例子：将xufqin用户的进程优先级调高为-5。<br>   #renice  -5  -u  xufqin</p></blockquote><h4 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h4><p>忽略挂起信号运行指定的命令</p><h4 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h4><p>查找匹配条件的进程</p><h4 id="runlevel"><a href="#runlevel" class="headerlink" title="runlevel"></a>runlevel</h4><p>查看当前系统的运行级别</p><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><p>切换运行级别，后接数字（0-6）</p><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线上查询及帮助命令&quot;&gt;&lt;a href=&quot;#线上查询及帮助命令&quot; class=&quot;headerlink&quot; title=&quot;线上查询及帮助命令&quot;&gt;&lt;/a&gt;线上查询及帮助命令&lt;/h3&gt;&lt;h4 id=&quot;man&quot;&gt;&lt;a href=&quot;#man&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Linux学习笔记" scheme="http://chomd.club/categories/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://chomd.club/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS6.8最小化安装</title>
    <link href="http://chomd.club/2017/12/08/CentOS6.8%E6%9C%80%E5%B0%8F%E5%8C%96%E5%AE%89%E8%A3%85/"/>
    <id>http://chomd.club/2017/12/08/CentOS6.8最小化安装/</id>
    <published>2017-12-08T11:11:41.000Z</published>
    <updated>2019-03-31T14:59:44.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装CentOS6-8操作系统的过程"><a href="#安装CentOS6-8操作系统的过程" class="headerlink" title="安装CentOS6.8操作系统的过程"></a><strong>安装CentOS6.8操作系统的过程</strong></h2><p>加载完CentOS6.8的ISO镜像文件后，开启/重启计算机或虚拟机，此时系统会进行自检，自检完毕后就会出现如图1-1所示的安装操作系统时的引导界面。</p><blockquote><p>图1-1<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr7vuicxj20hu0dbqeg.jpg" alt=""><br>提示：如果是在虚拟机上安装CentOS系统，需要进入虚拟机界面操作，如果需要退出虚拟机界面，可按快捷组合键Ctrl+Alt。</p></blockquote><h3 id="选择系统引导方式"><a href="#选择系统引导方式" class="headerlink" title="选择系统引导方式"></a><strong>选择系统引导方式</strong></h3><p>在图1-1所示的引导界面中，可以看到共有五种引导方式，其中第一种（新服务器安装或已有服务器升级）和第三种（系统故障恢复）引导方式比较有用，其他几个选择基本用途不大，可以忽略。此处选择第一项“Install or upgrade an existing system”，即默认选项，然后按Enter（回车）键进入图形安装界面。  </p><h3 id="检查安装光盘介质"><a href="#检查安装光盘介质" class="headerlink" title="检查安装光盘介质"></a><strong>检查安装光盘介质</strong></h3><p>确定引导方式后，进入如图1-2所示的界面，如果需要检查光盘介质，选择“OK”，否则按Tab键选择“Skip”，这里直接按Tab选择“Skip”，然后按Enter键 继续  </p><blockquote><p>图1-2<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9iafg7j20m60ggglo.jpg" alt=""></p></blockquote><h3 id="进入安装下一步界面"><a href="#进入安装下一步界面" class="headerlink" title="进入安装下一步界面"></a><strong>进入安装下一步界面</strong></h3><p>忽略光盘介质检查后，进入如图1-3所示的界面。然后单击“NEXT”键继续。   </p><blockquote><p>图1-3<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9lkxeij20mb0gi43c.jpg" alt=""></p></blockquote><h3 id="安装过程语言选择"><a href="#安装过程语言选择" class="headerlink" title="安装过程语言选择"></a><strong>安装过程语言选择</strong></h3><p>进入如图1-4所示的界面后，可对安装过程语言进行选择，这里保留默认选项“English”即可，然后单机“Next”继续。  </p><blockquote><p>图1-4<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9kekt2j20m50ge0u1.jpg" alt=""></p></blockquote><h3 id="选择键盘布局"><a href="#选择键盘布局" class="headerlink" title="选择键盘布局"></a><strong>选择键盘布局</strong></h3><p>进入如图1-5所示的选择键盘布局界面后，选择保留默认选项“U.S.English”，单击“NEXT”继续  </p><blockquote><p>图1-5<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9j34r2j20m70gigmq.jpg" alt="">  </p></blockquote><h3 id="选择合理的物理设备"><a href="#选择合理的物理设备" class="headerlink" title="选择合理的物理设备"></a><strong>选择合理的物理设备</strong></h3><p>进入如图1-6所示的界面后，会看到两个选项，如果是普通服务器，默认选择第一个“Basic Storage Devices”即可，第二个是用于特殊存储设备的，例如SANs（ISCSI）等。这里保留默认选项即可，然后单击“NEXT”继续。  </p><blockquote><p>图1-6<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9j1hq3j20m50gfmy1.jpg" alt=""></p></blockquote><h3 id="初始化硬盘提示"><a href="#初始化硬盘提示" class="headerlink" title="初始化硬盘提示"></a><strong>初始化硬盘提示</strong></h3><p>进入如图1-7所示的界面后，会看到相应的警告信息，单击 “Yes,discard any data” 继续。   </p><blockquote><p>图1-7<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9j1zyoj20j809y3zb.jpg" alt=""></p></blockquote><h3 id="初始化主机名"><a href="#初始化主机名" class="headerlink" title="初始化主机名"></a><strong>初始化主机名</strong></h3><p>现在进入如图1-8界面，在图1-8中，左上角的“Hostname”表示配置主机名，在右边的边框里，会有默认的主机名，将其清空，然后设置你自己的主机名，这里用zht作为主机名。  </p><blockquote><p>图1-8<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9k9rakj20mb0gmt9f.jpg" alt=""></p></blockquote><h3 id="系统时钟及时区设置"><a href="#系统时钟及时区设置" class="headerlink" title="系统时钟及时区设置"></a><strong>系统时钟及时区设置</strong></h3><p>在图1-9所示的界面中，选择“Asia/Shanghai”，然后取消“System clock uses UTC” 前的对勾，然后单击”Next”继续。  </p><blockquote><p>图1-9<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9n3ju1j20m50ge76m.jpg" alt=""></p></blockquote><h3 id="设置超级用户root口令"><a href="#设置超级用户root口令" class="headerlink" title="设置超级用户root口令"></a><strong>设置超级用户root口令</strong></h3><p>在如图1-10界面中，输入两次root用户的口令，然后单击右下角“Next”继续。如果密码过于简单会出现如图1-11所示的提示，可以选择单击“Use Anyway”强制设置。  </p><blockquote><p>图1-10<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9marluj20m405lgm6.jpg" alt=""></p><p>图1-11<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9mdbawj209d03x74c.jpg" alt=""></p></blockquote><h2 id="磁盘分区选择与磁盘分区配置过程"><a href="#磁盘分区选择与磁盘分区配置过程" class="headerlink" title="磁盘分区选择与磁盘分区配置过程"></a><strong>磁盘分区选择与磁盘分区配置过程</strong></h2><h3 id="选择系统安装磁盘空间类型"><a href="#选择系统安装磁盘空间类型" class="headerlink" title="选择系统安装磁盘空间类型"></a><strong>选择系统安装磁盘空间类型</strong></h3><p>经过以上步骤之后，会进入如图2-1所示的界面。  </p><blockquote><p>图2-1<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9myaq1j20m60gk0uh.jpg" alt=""></p></blockquote><p>在这里我们选择“Create Custom Layout”自定义磁盘分区，然后会进入如图2-2所示的界面中。  </p><blockquote><p>图2-2<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9mxexsj20m90gkdgq.jpg" alt=""></p></blockquote><h3 id="自行定制磁盘分区"><a href="#自行定制磁盘分区" class="headerlink" title="自行定制磁盘分区"></a><strong>自行定制磁盘分区</strong></h3><p>在这里，先选中磁盘下的“Free 10236”这一行，然后点击“Create”按钮，开始创建磁盘分区，进入如图2-3所示的界面  </p><blockquote><p>图2-3<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9nngsrj20990a53z1.jpg" alt=""></p></blockquote><p>选择创建标准分区（Standard Partition）后，单击页面右下角的“Create”按钮，进入到如图2-4所示的界面，然后按照图2-4所示配置第一个分区（boot分区）即可，配置完成后点击“OK”即可。  </p><blockquote><p>图2-4<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9njahsj20e10cvq3m.jpg" alt=""></p></blockquote><p>接着继续创建swap交换分区，配置如图2-5界面所示即可，然后点击“OK”  </p><blockquote><p>图2-5<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9nl3ujj20e40cq3za.jpg" alt=""></p></blockquote><p>最后一步创建根（/）分区，再次进入“Add Partition”操作界面后，按照图2-6配置根（/）分区的设置即可。  </p><blockquote><p>图2-6<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9o93v8j20e30ctwf6.jpg" alt=""><br>由于根（/）分区是最后一个分区，因此就把剩余的空间都给它了 !</p></blockquote><p>创建完根分区后，最终的结果如图2-7所示，然后点击“Next”继续。此时，系统需要对分区进行格式化，而且会出现格式化警告窗口，这时，单击“Format（格式化）”  继续即可，这个过程可能还会提示写入分区表，在写入配置但磁盘的窗口中，单机“write changes to disk”继续。</p><blockquote><p>图2-7<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9oaa6qj20m40ghjsd.jpg" alt=""></p></blockquote><h2 id="CentOS6-8系统安装包组的选择与配置过程"><a href="#CentOS6-8系统安装包组的选择与配置过程" class="headerlink" title="CentOS6.8系统安装包组的选择与配置过程"></a><strong>CentOS6.8系统安装包组的选择与配置过程</strong></h2><h3 id="启动引导设备的配置"><a href="#启动引导设备的配置" class="headerlink" title="启动引导设备的配置"></a><strong>启动引导设备的配置</strong></h3><p>分区格式化格式化后，会进入如图2-8所示的界面，系统默认使用FRUB作为启动加载器，引导程序默认在MBR下，按“Next”继续。  </p><blockquote><p>图2-8<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9pfa0jj20ma0gmabf.jpg" alt=""><br>勾选图中的“Use a boot loader password”可为GRUB引导菜单设置密码，防止别人接触到计算机破解root密码。</p><h3 id="系统安装类型选择击自定义额外包组"><a href="#系统安装类型选择击自定义额外包组" class="headerlink" title="系统安装类型选择击自定义额外包组"></a><strong>系统安装类型选择击自定义额外包组</strong></h3><p>进入图2-9所示的界面后，勾选“Miniml”和“Customize now（立即自定义）”然后单击“Next”继续即可，然后会进入自定义安装包选择界面。<br>图2-9<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9orwjpj20lx0ghdh5.jpg" alt=""></p></blockquote><p>在自定义安装包选择界面中，按照图2-10和图2-11所示配置即可。然后点击“Next”继续即可开始安装系统了！  </p><blockquote><p>图2-10<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9pkouzj20kf079gmi.jpg" alt=""></p><p>图2-11<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lr9q85kjj20km07ajrx.jpg" alt=""></p></blockquote><h3 id="安装结束"><a href="#安装结束" class="headerlink" title="安装结束"></a><strong>安装结束</strong></h3><p>系统安装结束后，出现的界面如图2-12所示，此时单击“Reboot”键即可重启系统。  </p><blockquote><p>图2-12<img src="http://ww1.sinaimg.cn/large/78796c09gy1g1lrvb9rpkj20m10go0tz.jpg" alt=""></p></blockquote><p>   以上内容参考自著名讲师老男孩的著作《跟老男孩学Linux运维web集群实战》一书！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装CentOS6-8操作系统的过程&quot;&gt;&lt;a href=&quot;#安装CentOS6-8操作系统的过程&quot; class=&quot;headerlink&quot; title=&quot;安装CentOS6.8操作系统的过程&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装CentOS6.8操作系统的过程&lt;/stro
      
    
    </summary>
    
      <category term="Linux学习笔记" scheme="http://chomd.club/categories/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://chomd.club/tags/Linux/"/>
    
  </entry>
  
</feed>
